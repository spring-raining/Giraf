// Generated by CoffeeScript 1.8.0
var Giraf, app,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

if (typeof Giraf === "undefined" || Giraf === null) {
  Giraf = {};
}

if (Giraf._base == null) {
  Giraf._base = {};
}

if (Giraf.App == null) {
  Giraf.App = {};
}

if (Giraf.Controller == null) {
  Giraf.Controller = {};
}

if (Giraf.Controller._base == null) {
  Giraf.Controller._base = {};
}

if (Giraf.Controller.Action == null) {
  Giraf.Controller.Action = {};
}

if (Giraf.History == null) {
  Giraf.History = {};
}

if (Giraf.Model == null) {
  Giraf.Model = {};
}

if (Giraf.Model._base == null) {
  Giraf.Model._base = {};
}

if (Giraf.Model.Composition == null) {
  Giraf.Model.Composition = {};
}

if (Giraf.Model.File == null) {
  Giraf.Model.File = {};
}

if (Giraf.Settings == null) {
  Giraf.Settings = {};
}

if (Giraf.Settings._base == null) {
  Giraf.Settings._base = {};
}

if (Giraf.Settings.CookieBinder == null) {
  Giraf.Settings.CookieBinder = {};
}

if (Giraf.Task == null) {
  Giraf.Task = {};
}

if (Giraf.Task._base == null) {
  Giraf.Task._base = {};
}

if (Giraf.Task.ChangeSelected == null) {
  Giraf.Task.ChangeSelected = {};
}

if (Giraf.Task.CreateNewComposition == null) {
  Giraf.Task.CreateNewComposition = {};
}

if (Giraf.Task.FileLoader == null) {
  Giraf.Task.FileLoader = {};
}

if (Giraf.Task.RefreshComposition == null) {
  Giraf.Task.RefreshComposition = {};
}

if (Giraf.Task.SelectFile == null) {
  Giraf.Task.SelectFile = {};
}

if (Giraf.Tools == null) {
  Giraf.Tools = {};
}

if (Giraf.View == null) {
  Giraf.View = {};
}

if (Giraf.View._base == null) {
  Giraf.View._base = {};
}

if (Giraf.View.Expert == null) {
  Giraf.View.Expert = {};
}

if (Giraf.View.Expert._base == null) {
  Giraf.View.Expert._base = {};
}

if (Giraf.View.Expert.Composition == null) {
  Giraf.View.Expert.Composition = {};
}

if (Giraf.View.Expert.Composition.Controller == null) {
  Giraf.View.Expert.Composition.Controller = {};
}

if (Giraf.View.Expert.Droparea == null) {
  Giraf.View.Expert.Droparea = {};
}

if (Giraf.View.Expert.Effect == null) {
  Giraf.View.Expert.Effect = {};
}

if (Giraf.View.Expert.Node == null) {
  Giraf.View.Expert.Node = {};
}

if (Giraf.View.Expert.Project == null) {
  Giraf.View.Expert.Project = {};
}

if (Giraf.View.Modal == null) {
  Giraf.View.Modal = {};
}

if (Giraf.View.Nav == null) {
  Giraf.View.Nav = {};
}

if (Giraf.View.Quick == null) {
  Giraf.View.Quick = {};
}

if (Giraf.View.Quick._base == null) {
  Giraf.View.Quick._base = {};
}

Giraf._base = (function() {
  function _base() {}

  return _base;

})();

Giraf.App = (function(_super) {
  __extends(App, _super);

  function App() {
    this.run = __bind(this.run, this);
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.run = function() {
    return $((function(_this) {
      return function() {
        _this.model = new Giraf.Model;
        _this.view = new Giraf.View(_this);
        return _this.settings = new Giraf.Settings(_this);
      };
    })(this));
  };

  return App;

})(Giraf._base);

Giraf.Controller._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.Controller.Action = (function(_super) {
  __extends(Action, _super);

  function Action(app, action, args) {
    var fileList, piece, task;
    switch (action) {
      case "drop__import_file":
        fileList = args.fileList;
        task = new Giraf.Task.FileLoader;
        task.run(app, fileList).fail(function() {
          return console.log("failed");
        });
        break;
      case "expert__project__refresh_composition":
        piece = app.view.expert.project.pieces[$(args.element).attr("data-uuid")];
        task = new Giraf.Task.RefreshComposition;
        task.run(app, piece.referer_uuid).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__append_point":
        app.view.nav.inactive().then(function() {
          return app.view.expert.node.appendPoint();
        }).fail(function() {
          return console.log("failed");
        });
        break;
      case "expert__change_target":
        task = new Giraf.Task.ChangeSelected;
        task.run(app, $(args.element).attr("data-uuid")).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__import_file":
        app.view.nav.inactive().then(function() {
          task = new Giraf.Task.SelectFile;
          return task.run(app);
        }).then(function(fileList) {
          task = new Giraf.Task.FileLoader;
          return task.run(app, fileList);
        }).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__new_composition":
        app.view.nav.inactive().then(function() {
          task = new Giraf.Task.CreateNewComposition;
          return task.run(app);
        }).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__hoge":
        app.view.nav.inactive().then(function() {
          var modal;
          modal = new Giraf.View.Modal;
          return modal.show({
            title: "たいとる",
            content: "<b>ああああ</b>いいいい",
            action: {
              yes: {
                text: "はい",
                primary: true
              },
              no: {
                text: "いいえ"
              }
            }
          });
        });
        break;
      default:
        console.log("Action '" + action + "' is not defined.");
    }
  }

  return Action;

})(Giraf.Controller._base);

Giraf.History = (function(_super) {
  __extends(History, _super);

  function History() {
    return History.__super__.constructor.apply(this, arguments);
  }

  return History;

})(Giraf._base);

Giraf.Model = (function(_super) {
  __extends(Model, _super);

  function Model() {
    this.models = {};
  }

  Model.prototype.set = function(uuid, model) {
    return this.models[uuid] = model;
  };

  Model.prototype.get = function(uuid) {
    return this.models[uuid];
  };

  return Model;

})(Giraf._base);

Giraf.Model._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  _base.data = {};

  _base.prototype.update = function(key, value) {
    var data, key_array, last_key;
    data = this.data;
    key_array = key.split(".");
    last_key = key_array.pop();
    _.each(key_array, (function(_this) {
      return function(t) {
        return data = data != null ? data[t] : void 0;
      };
    })(this));
    if (data[last_key] != null) {
      if (typeof data[last_key] === "number") {
        return data[last_key] = Number(value);
      } else {
        return data[last_key] = value;
      }
    }
  };

  return _base;

})(Giraf._base);

Giraf.Model.Compositions = (function(_super) {
  __extends(Compositions, _super);

  function Compositions() {
    return Compositions.__super__.constructor.apply(this, arguments);
  }

  Compositions.append = function(app, name) {
    var d, uuid;
    d = new $.Deferred;
    uuid = Giraf.Tools.uuid();
    app.model.set(uuid, new Giraf.Model.Composition(app, uuid, name != null ? name : "New Composition"));
    d.resolve(uuid);
    return d.promise();
  };

  return Compositions;

})(Giraf.Model._base);

Giraf.Model.Composition = (function(_super) {
  __extends(Composition, _super);

  function Composition(app, uuid, name) {
    this.app = app;
    this.uuid = uuid;
    this.name = name;
    this.data = {
      uuid: "",
      name: "",
      tumnbnail: "",
      effect: {
        property: {
          out_framerate: 12,
          out_speed: 1,
          out_size: 320,
          sample_check: true,
          sample_radio: "soso"
        },
        script: {
          script: ""
        },
        crop: null,
        keying: null,
        color: null,
        text: null
      }
    };
    this.data.uuid = uuid;
    this.data.name = name;
  }

  return Composition;

})(Giraf.Model._base);

Giraf.Model.Files = (function(_super) {
  __extends(Files, _super);

  function Files() {
    return Files.__super__.constructor.apply(this, arguments);
  }

  Files.append = function(app, file, content) {
    var d, uuid;
    d = new $.Deferred;
    uuid = Giraf.Tools.uuid();
    app.model.set(uuid, new Giraf.Model.File(app, uuid, file, content));
    d.resolve(uuid);
    return d.promise();
  };

  return Files;

})(Giraf.Model._base);

Giraf.Model.File = (function(_super) {
  __extends(File, _super);

  function File(app, uuid, file, content) {
    this.app = app;
    this.uuid = uuid;
    this.file = file;
    this.content = content;
    this.data = {
      uuid: "",
      name: "",
      size: 0,
      type: "",
      tumnbnail: "",
      file: null,
      effect: {
        property: {
          in_time: -1,
          in_tumnbnail: "",
          out_time: -1,
          out_thumbnail: "",
          select_framerate: 12
        }
      }
    };
    this.status = this.content != null ? "normal" : "loading";
    this.data.uuid = uuid;
    this.data.file = file;
    this.data.name = file.name;
    this.data.size = file.size;
    this.data.type = file.type;
  }

  File.prototype.setContent = function(content) {
    this.content = content;
    this.status = "normal";
    return $(this).triggerHandler("statusChanged", this.status);
  };

  File.prototype.getContent = function() {
    return this.content;
  };

  return File;

})(Giraf.Model._base);

Giraf.Settings = (function(_super) {
  __extends(Settings, _super);

  function Settings(app) {
    this.app = app;
    this.cookieBinder = new Giraf.Settings.CookieBinder();
  }

  return Settings;

})(Giraf._base);

Giraf.Settings._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.Settings.CookieBinder = (function(_super) {
  __extends(CookieBinder, _super);

  function CookieBinder(app) {
    this.app = app;
    $.cookie.json = true;
  }

  CookieBinder.prototype.set = function(data) {
    return $.cookie('giraf', {
      version: 100,
      data: data
    });
  };

  CookieBinder.prototype.get = function() {
    return $.cookie('giraf');
  };

  CookieBinder.prototype.clear = function() {
    return $.removeCookie('giraf');
  };

  return CookieBinder;

})(Giraf.Settings._base);

Giraf.Task._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.Task.ChangeSelected = (function() {
  function ChangeSelected() {}

  ChangeSelected.prototype.run = function(app, uuid) {
    var d;
    d = $.Deferred();
    $.when(app.view.expert.project.select(uuid), app.view.expert.node.select(uuid)).done((function(_this) {
      return function() {
        return d.resolve();
      };
    })(this));
    return d.promise();
  };

  return ChangeSelected;

})();

Giraf.Task.CreateNewComposition = (function() {
  function CreateNewComposition() {}

  CreateNewComposition.prototype.run = function(app) {
    var d, uuid;
    d = $.Deferred();
    uuid = null;
    Giraf.Model.Compositions.append(app).then(function(uuid_) {
      uuid = uuid_;
      app.view.expert.project.append(app.model.get(uuid));
      return d.resolve();
    }, function() {
      return d.reject();
    });
    return d.promise();
  };

  return CreateNewComposition;

})();

Giraf.Task.FileLoader = (function(_super) {
  var readFile;

  __extends(FileLoader, _super);

  function FileLoader() {
    return FileLoader.__super__.constructor.apply(this, arguments);
  }

  FileLoader.prototype.run = function(app, files) {
    var d, file, tasks, _i, _len, _ref;
    d = $.Deferred();
    tasks = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if ((_ref = file.type) !== "video/mp4" && _ref !== "image/gif" && _ref !== "image/png" && _ref !== "image/jpeg") {
        continue;
      }
      tasks.push((function() {
        var d_, uuid;
        d_ = $.Deferred();
        uuid = null;
        Giraf.Model.Files.append(app, file).then(function(uuid_) {
          var d__;
          d__ = $.Deferred();
          uuid = uuid_;
          app.view.expert.project.append(app.model.get(uuid));
          readFile.call(this, file).then(function(file, content) {
            return d__.resolve(file, content);
          });
          return d__.promise();
        }).then(function(file, content) {
          return app.model.get(uuid).setContent(content);
        }).then(function() {
          return d_.resolve();
        }, function() {
          return d_.reject();
        });
        return d_.promise();
      })());
    }
    $.when.apply($, tasks).then(function() {
      return d.resolve();
    }, function() {
      return d.reject();
    });
    return d.promise();
  };

  readFile = function(file) {
    var d, reader;
    d = $.Deferred();
    reader = new FileReader;
    reader.onload = function() {
      return d.resolve(file, reader.result);
    };
    reader.onerror = function(error) {
      return d.reject(error);
    };
    reader.readAsDataURL(file);
    return d.promise();
  };

  return FileLoader;

})(Giraf.Task._base);

Giraf.Task.RefreshComposition = (function() {
  function RefreshComposition() {}

  RefreshComposition.prototype.run = function(app, uuid) {
    var d, model, type;
    d = $.Deferred();
    model = app.model.get(uuid);
    if (model instanceof Giraf.Model.File) {
      type = null;
      switch (model.file.type) {
        case "video/mp4":
          type = "video";
          break;
        case "image/gif":
        case "image/png":
        case "image/jpeg":
          type = "img";
          break;
      }
      if (type == null) {
        d.reject();
      }
      app.view.expert.composition.refresh(type, model.content).then(function() {
        return d.resolve();
      }, function() {
        return d.reject();
      });
    }
    if (model instanceof Giraf.Model.Composition) {
      app.view.expert.composition.refresh("img", null).then(function() {
        return d.resolve();
      }, function() {
        return d.reject();
      });
    }
    return d.promise();
  };

  return RefreshComposition;

})();

Giraf.Task.SelectFile = (function(_super) {
  __extends(SelectFile, _super);

  function SelectFile() {
    return SelectFile.__super__.constructor.apply(this, arguments);
  }

  SelectFile.prototype.run = function(app) {
    var $input, d, inputId;
    d = new $.Deferred;
    inputId = "SelectFile";
    $input = $("#" + inputId);
    if ($input.get(0) == null) {
      $("body").append("<input type=\"file\" name=\"file\" id=\"" + inputId + "\" class=\"hidden\" value=\"\" multiple=\"multiple\"/>");
      $input = $("#" + inputId);
    }
    $input.on("change", function() {
      var fileList;
      fileList = $input.get(0).files;
      return d.resolve(fileList);
    });
    $input.trigger("click");
    return d.promise();
  };

  return SelectFile;

})(Giraf.Task._base);

Giraf.Tools = (function(_super) {
  __extends(Tools, _super);

  function Tools() {
    return Tools.__super__.constructor.apply(this, arguments);
  }

  Tools.uuid = function() {
    var s4;
    s4 = function() {
      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    };
    return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+ s4()+s4()+s4();
  };

  return Tools;

})(Giraf._base);

Giraf.View = (function(_super) {
  var _selector_expert, _selector_nav, _selector_quick;

  __extends(View, _super);

  _selector_nav = "nav";

  _selector_quick = "#quick";

  _selector_expert = "#expert";

  function View(app) {
    this.app = app;
    this.nav = new Giraf.View.Nav(app, $(_selector_nav));
    this.expert = new Giraf.View.Expert(app, $(_selector_expert));
    $(document).on("click", (function(_this) {
      return function(event) {
        var $t;
        $t = $(event.target);
        if ($t.attr("data-action") != null) {
          _.each($t.attr("data-action").split(" "), function(action) {
            return Giraf.Controller.Action(app, action, {
              element: event.target
            });
          });
        }
        if ($t.attr("data-action-weak") != null) {
          _.each($t.attr("data-action-weak").split(" "), function(action) {
            return Giraf.Controller.Action(app, action, {
              element: event.target
            });
          });
        }
        if ($t.attr("data-action-click") != null) {
          _.each($t.attr("data-action-click").split(" "), function(action) {
            return Giraf.Controller.Action(app, action, {
              element: event.target
            });
          });
        }
        if ($t.attr("data-action-click-weak") != null) {
          _.each($t.attr("data-action-click-weak").split(" "), function(action) {
            return Giraf.Controller.Action(app, action, {
              element: event.target
            });
          });
        }
        $t.parents("[data-action]").each(function() {
          return _.each($(this).attr("data-action").split(" "), (function(_this) {
            return function(action) {
              return Giraf.Controller.Action(app, action, {
                element: _this
              });
            };
          })(this));
        });
        return $t.parents("[data-action-click]").each(function() {
          return _.each($(this).attr("data-action-click").split(" "), (function(_this) {
            return function(action) {
              return Giraf.Controller.Action(app, action, {
                element: _this
              });
            };
          })(this));
        });
      };
    })(this)).on("dblclick", (function(_this) {
      return function(event) {
        var $t;
        $t = $(event.target);
        if ($t.attr("data-action-dblclick") != null) {
          _.each($t.attr("data-action-dblclick").split(" "), function(action) {
            return Giraf.Controller.Action(app, action, {
              element: event.target
            });
          });
        }
        if ($t.attr("data-action-dblclick-weak") != null) {
          _.each($t.attr("data-aciton-dblclick-weak").split(" "), function(action) {
            return Giraf.Controller.Action(app, action, {
              element: event.target
            });
          });
        }
        return $t.parents("[data-action-dblclick]").each(function() {
          return _.each($(this).attr("data-action-dblclick").split(" "), (function(_this) {
            return function(action) {
              return Giraf.Controller.Action(app, action, {
                element: _this
              });
            };
          })(this));
        });
      };
    })(this));
  }

  return View;

})(Giraf._base);

Giraf.View._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.View.Expert = (function(_super) {
  var _selector_composition, _selector_container, _selector_effect, _selector_node, _selector_project;

  __extends(Expert, _super);

  _selector_container = "#expert_container";

  _selector_project = "#expert_project > .panel-container";

  _selector_composition = "#expert_composition > .panel-container";

  _selector_effect = "#expert_effect > .panel-container";

  _selector_node = "#expert_node > .panel-container";

  function Expert(app, $expert) {
    this.app = app;
    this.$expert = $expert;
    this.project = new Giraf.View.Expert.Project(app, $expert.find(_selector_project));
    this.composition = new Giraf.View.Expert.Composition(app, $expert.find(_selector_composition));
    this.effect = new Giraf.View.Expert.Effect(app, $expert.find(_selector_effect));
    this.node = new Giraf.View.Expert.Node(app, $expert.find(_selector_node));
    this.droparea = new Giraf.View.Expert.Droparea(app, $expert);
  }

  return Expert;

})(Giraf.View._base);

Giraf.View.Expert._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf.View._base);

Giraf.View.Expert.Composition = (function(_super) {
  __extends(Composition, _super);

  function Composition(app, $composition) {
    var template;
    this.app = app;
    this.$composition = $composition;
    template = _.template("<div class=\"composition-window\">\n  <div class=\"composition-window-placeholder\">\n    <span>Composition</span>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Asperiores corporis delectus, doloremque eligendi explicabo fugit harum iusto magnam minus natus non odit officia perspiciatis possimus provident quo similique, suscipit tempora!</p><p>Aut ea eveniet facere officia placeat qui quod soluta! A autem commodi culpa cum, dignissimos dolorum eveniet, explicabo minima nesciunt nisi, officia omnis optio quae quas quia reiciendis rem unde?</p><p>Assumenda consectetur corporis et magnam voluptate. Ab aut beatae corporis cum dolorem dolores eius est expedita fuga hic, ipsum nobis quasi quibusdam quo recusandae soluta temporibus ut veniam vitae voluptatem?</p><p>Cupiditate dignissimos dolore dolorum ducimus enim, et explicabo fugit illo ipsa ipsam itaque laborum maiores nemo obcaecati quas quia quis similique! Autem consectetur dignissimos laudantium magni odit tenetur veniam vero.</p><p>Ab amet debitis dolorem est eveniet explicabo illum incidunt libero, magni minima, natus numquam omnis placeat porro quisquam saepe tempora voluptate! Aliquam eius error facere, maiores numquam vel veniam voluptatum.</p><p>Aliquid, assumenda consectetur cum cumque deserunt distinctio expedita fugit harum impedit magnam nemo nihil nobis perspiciatis ratione repellat sed, suscipit. At atque eos in molestias, nesciunt quas reiciendis. Consequuntur, ipsum.</p>\n  </div>\n  <img class=\"composition-img hidden\"/>\n  <video class=\"composition-video hidden\"></video>\n</div>\n<div class=\"composition-controller\"></div>\n<div class=\"composition-progress\">\n  <progress value=\"0\" max=\"100\"></progress>\n</div>");
    this.$composition.append(template({}));
    this.controller = new Giraf.View.Expert.Composition.Controller({
      app: app,
      $controller: $(".composition-controller"),
      $img: $("img.composition-img"),
      $video: $("video.composition-video")
    });
  }

  Composition.prototype.refresh = function(type, content_url) {
    var $img, $video, d;
    d = $.Deferred();
    switch (type) {
      case "video":
        $video = $("video.composition-video");
        if ($video.get(0) == null) {
          d.reject();
        }
        $(".composition-window").children().each(function() {
          return $(this).addClass("hidden");
        });
        this.controller.changeMode("none");
        $video.removeClass("hidden").attr("src", content_url).one("canplay", function() {
          return d.resolve();
        });
        this.controller.changeMode("video");
        break;
      case "img":
        $img = $("img.composition-img");
        if ($img.get(0) == null) {
          d.reject();
        }
        $(".composition-window").children().each(function() {
          return $(this).addClass("hidden");
        });
        this.controller.changeMode("none");
        $img.removeClass("hidden").attr("src", content_url);
        d.resolve();
        break;
      default:
        console.log("Type '" + type + "' is not defined.");
        this.controller.changeMode("none");
        d.resolve();
    }
    return d.promise();
  };

  return Composition;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Composition.Controller = (function(_super) {
  __extends(Controller, _super);

  function Controller(args) {
    this.app = args.app;
    this.$controller = args.$controller;
    this.$img = args.$img;
    this.$video = args.$video;
    this.type = "none";
    this.frame = 1.0 / 12;
    this.$controller.append("<div class=\"girafont composition-controller-previous\">previous</div>\n<div class=\"girafont composition-controller-play\">play</div>\n<div class=\"girafont composition-controller-next\">next</div>\n<div class=\"composition-controller-seek\">\n  <div class=\"composition-controller-seek-handle\"></div>\n</div>\n<div class=\"composition-controller-timer\">00:00:00</div>\n<div class=\"compsitilon-controller-volume\">\n  <div class=\"composition-controller-volume-slider\"></div>\n  <div class=\"compsition-controller-volume-button\"></div>\n</div>");
    this.$play = this.$controller.find(".composition-controller-play");
    this.$seek = this.$controller.find(".composition-controller-seek");
    this.$timer = this.$controller.find(".composition-controller-timer");
    this.$volume = this.$controller.find(".composition-controller-volume");
    this.$volumeSlider = this.$controller.find(".composition-controller-volume-slider");
    this.$volumeButton = this.$controller.find(".composition-controller-volume-button");
    this.$play.on("click", (function(_this) {
      return function() {
        return _this.play();
      };
    })(this));
  }

  Controller.prototype.play = function(bool) {
    if (this.type === "video") {
      if (this.$video.get(0).paused || bool) {
        this.$video.get(0).play();
        return this.$play.text("pause");
      } else if (!this.$video.get(0).paused || !bool) {
        this.$video.get(0).pause();
        return this.$play.text("play");
      }
    }
  };

  Controller.prototype.pause = function() {};

  Controller.prototype.seek = function(timeOrFrame) {};

  Controller.prototype.volume = function(value) {};

  Controller.prototype.nextFrame = function(frame) {
    this.frame = frame;
  };

  Controller.prototype.previousFrame = function(frame) {
    this.frame = frame;
  };

  Controller.prototype.changeType = function(type) {
    if (type === "composition" || type === "video" || type === "image" || type === "none") {
      return this.type = type;
    }
  };

  return Controller;

})(Giraf.View._base);

Giraf.View.Expert.Droparea = (function(_super) {
  var innerAcitve, isActive;

  __extends(Droparea, _super);

  isActive = false;

  innerAcitve = 0;

  function Droparea(app, $droparea) {
    this.app = app;
    this.$droparea = $droparea;
    $droparea.on("dragstart", (function(_this) {
      return function() {
        return true;
      };
    })(this)).on("dragover", (function(_this) {
      return function() {
        return false;
      };
    })(this)).on("dragenter", (function(_this) {
      return function(event) {
        var item, _i, _len, _ref, _ref1;
        if (isActive) {
          innerAcitve++;
        } else {
          _ref = event.originalEvent.dataTransfer.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if ((_ref1 = item.type) === "video/mp4" || _ref1 === "image/gif" || _ref1 === "image/png" || _ref1 === "image/jpeg") {
              _this.show();
              break;
            }
          }
        }
        return false;
      };
    })(this)).on("dragleave", (function(_this) {
      return function() {
        if (innerAcitve > 0) {
          return innerAcitve--;
        } else {
          return _this.hide();
        }
      };
    })(this)).on("drop", (function(_this) {
      return function(event) {
        var files;
        innerAcitve = false;
        _this.hide();
        files = event.originalEvent.dataTransfer.files;
        if (files.length > 0) {
          Giraf.Controller.Action(app, "drop__import_file", {
            fileList: files
          });
        }
        return false;
      };
    })(this));
  }

  Droparea.prototype.show = function() {
    var template;
    isActive = true;
    template = _.template("<div class=\"droparea\">\n  <div class=\"droparea-label\">\n    <h3>ドロップでファイル読み込み</h3>\n  </div>\n</div>");
    return this.$droparea.append(template());
  };

  Droparea.prototype.hide = function() {
    isActive = false;
    return $(".droparea").remove();
  };

  return Droparea;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Effect = (function(_super) {
  __extends(Effect, _super);

  function Effect(app, $effect) {
    var self, template;
    this.app = app;
    this.$effect = $effect;
    template = _.template("<div class=\"effect-content hidden\" data-effect-content=\"property\"><%= property %></div>\n<div class=\"effect-content hidden\" data-effect-content=\"script\"><%= script %></div>\n<div class=\"effect-content hidden\" data-effect-content=\"crop\"><%= crop %></div>\n<div class=\"effect-content hidden\" data-effect-content=\"keying\"><%= keying %></div>\n<div class=\"effect-content hidden\" data-effect-content=\"color\"><%= color %></div>\n<div class=\"effect-content hidden\" data-effect-content=\"text\"><%= text %></div>\n<div class=\"effect-tab layer\"></div>\n<ul class=\"effect-tab\">\n  <li class=\"effect-tab-menu girafont\" data-change-effect-tab=\"property\">parameter</li>\n  <li class=\"effect-tab-menu girafont\" data-change-effect-tab=\"script\">magic</li>\n  <li class=\"effect-tab-menu girafont\" data-change-effect-tab=\"crop\">crop</li>\n  <li class=\"effect-tab-menu girafont\" data-change-effect-tab=\"keying\">keying</li>\n  <li class=\"effect-tab-menu girafont\" data-change-effect-tab=\"color\">palette</li>\n  <li class=\"effect-tab-menu girafont\" data-change-effect-tab=\"text\">text</li>\n</ul>");
    this.$effect.append(template({
      property: "<form id=\"form_effect_property\" name=\"effect_property\">\n  <fieldset class=\"effect-parameter-group\">\n    <label for=\"select__out_framerate\" class=\"half\">出力するフレームレート</label>\n    <select name=\"out_framerate\"\n            id=\"select__out_framerate\"\n            class=\"half\"\n            data-load=\"effect.property.out_framerate\">\n      <option value=\"1\">1fps</option>\n      <option value=\"2\">2fps</option>\n      <option value=\"3\">3fps</option>\n      <option value=\"4\">4fps</option>\n      <option value=\"6\">6fps</option>\n      <option value=\"8\">8fps</option>\n      <option value=\"12\">12fps</option>\n      <option value=\"15\">15fps</option>\n      <option value=\"24\">24fps</option>\n      <option value=\"30\">30fps</option>\n    </select>\n    <label for=\"number__out_speed\">出力するスピード</label>\n    <div class=\"slider-group\">\n      <input type=\"range\"\n             min=\"0.1\" max=\"4.0\" step=\"0.1\"\n             data-load=\"effect.property.out_speed\"/>\n      <input type=\"number\"\n             min=\"0.1\" max=\"4.0\" step=\"0.1\"\n             id=\"number__out_speed\"\n             data-load=\"effect.property.out_speed\"/>\n    </div>\n    <label for=\"number__out_size\">出力する大きさ</label>\n    <div class=\"slider-group\">\n      <input type=\"range\"\n             min=\"40\" max=\"720\" step=\"10\"\n             data-load=\"effect.property.out_size\"/>\n      <input type=\"number\"\n             min=\"40\" max=\"720\" step=\"10\"\n             id=\"number__out_size\"\n             data-load=\"effect.property.out_size\"/>\n    </div>\n  </fieldset>" + "<fieldset class=\"effect-parameter-group\">\n  <legend>切り取り位置を選択</legend>\n  <label for=\"\" class=\"half\">始点</label>\n  <label for=\"\" class=\"half\">終点</label>\n  <img src=\"\" class=\"half\"/>\n  <img src=\"\" class=\"half\"/>\n  <input type=\"hidden\"\n         data-load=\"effect.property.in_time\"/>\n  <input type=\"hidden\"\n         data-load=\"effect.property.out_time\"/>\n  <label for=\"select_select_framerate\" class=\"half\">切り取りフレームレート</label>\n  <select name=\"select_framerate\"\n          id=\"select_select_framerate\"\n          class=\"half\"\n          data-load=\"effect.property.select_framerate\">\n    <option value=\"1\">1fps</option>\n    <option value=\"2\">2fps</option>\n    <option value=\"3\">3fps</option>\n    <option value=\"4\">4fps</option>\n    <option value=\"6\">6fps</option>\n    <option value=\"8\">8fps</option>\n    <option value=\"12\">12fps</option>\n    <option value=\"15\">15fps</option>\n    <option value=\"24\">24fps</option>\n    <option value=\"30\">30fps</option>\n  </select>\n  <div class=\"half\"></div>\n  <button class=\"half\">動画からコンポジションを作成</button>\n</fieldset>" + "  <fieldset class=\"effect-parameter-group\">\n    <legend>ほげほげ</legend>\n    <label class=\"half\" for=\"checkbox__sample_check\">チェック</label>\n    <input type=\"checkbox\"\n           name=\"sample_check\"\n           id=\"checkbox__sample_check\"\n           value=\"sample_check\"\n           class=\"half\"\n           data-load=\"effect.property.sample_check\"/>\n    <label class=\"half\">ラジオ</label>\n    <div class=\"half\">\n      <input type=\"radio\"\n             name=\"sample_radio\"\n             value=\"yes\"\n             id=\"radio__sample_radio__yes\"\n             class=\"half\"\n             data-load=\"effect.property.sample_radio\"/>\n      <label for=\"radio__sample_radio__yes\">Yes</label>\n    </div>\n    <div class=\"half\"></div>\n    <div class=\"half\">\n      <input type=\"radio\"\n             name=\"sample_radio\"\n             value=\"no\"\n             id=\"radio__sample_radio__no\"\n             class=\"half\"\n             data-load=\"effect.property.sample_radio\"/>\n      <label for=\"radio__sample_radio__no\">No</label>\n    </div>\n    <div class=\"half\"></div>\n    <div class=\"half\">\n      <input type=\"radio\"\n             name=\"sample_radio\"\n             value=\"soso\"\n             id=\"radio__sample_radio__soso\"\n             class=\"half\"\n             data-load=\"effect.property.sample_radio\"/>\n      <label for=\"radio__sample_radio__soso\">So-so</label>\n    </div>\n  </fieldset>\n</form>",
      script: "<form id=\"form_effect_script\" name=\"effect_script\">\n  <fieldset class=\"effect-parameter-group\">\n    <legend>効果を追加</legend>\n    <label for=\"textarea_script\" class=\"half\">プリセット</label>\n    <button class=\"half\"><span class=\"girafont\">lightning</span>プリセットを選択</button>\n    <textarea name=\"script\" id=\"textarea_script\" cols=\"30\" rows=\"10\" data-load=\"effect.script.script\"></textarea>\n  </fieldset>\n</form>",
      crop: "<form id=\"form_effect_crop\" name=\"effect_crop\">\n</form>",
      keying: "<form id=\"form_effect_keying\" name=\"effect_keying\">\n</form>",
      color: "<form id=\"form_effect_color\" name=\"effect_color\">\n</form>",
      text: "<form id=\"form_effect_text\" name=\"effect_text\">\n</form>"
    }));
    self = this;
    $("li.effect-tab-menu").on("click", function() {
      return self.changeTab($(this).attr("data-change-effect-tab"));
    });
    this.changeTab("property");
  }

  Effect.prototype.changeTab = function(name) {
    $("li.effect-tab-menu").each(function() {
      return $(this).removeClass("selected");
    });
    $("li.effect-tab-menu[data-change-effect-tab=" + name + "]").addClass("selected");
    $(".effect-content").each(function() {
      return $(this).addClass("hidden");
    });
    return $(".effect-content[data-effect-content=" + name + "]").removeClass("hidden");
  };

  Effect.prototype.changeTarget = function(target_uuid) {
    var changeVal, self, update;
    this.target_uuid = target_uuid;
    changeVal = function($input, val) {
      if ($input.get(0).tagName === "INPUT") {
        if (($input.attr("type")) === "checkbox") {
          return $input.prop("checked", val === true);
        } else if (($input.attr("type")) === "radio") {
          return $input.prop("checked", $input.val() === val);
        } else {
          return $input.val(val);
        }
      } else if ($input.get(0).tagName === "SELECT") {
        return $input.val(val);
      } else if ($input.get(0).tagName === "TEXTAREA") {
        return $input.val(val);
      }
    };
    update = function(model, $input) {
      var data_load, val;
      data_load = $input.attr("data-load");
      if (($input.attr("type")) === "checkbox") {
        val = $input.prop("checked");
      } else {
        val = $input.val();
      }
      model.update(data_load, val);
      return $("[data-load=\"" + data_load + "\"]").each(function() {
        return changeVal($(this), val);
      });
    };
    self = this;
    return $("[data-load]").each(function() {
      var data, model;
      model = self.app.model.get(target_uuid);
      data = model.data;
      _.each($(this).attr("data-load").split("."), (function(_this) {
        return function(t) {
          return data = data != null ? data[t] : void 0;
        };
      })(this));
      if (data != null) {
        changeVal($(this), data);
        $(this).parents(".effect-parameter-group").removeClass("hidden");
        return $(this).off("change").on("change", (function(_this) {
          return function() {
            return update(model, $(_this));
          };
        })(this));
      } else {
        $(this).parents(".effect-parameter-group").addClass("hidden");
        return $(this).off("change");
      }
    });
  };

  return Effect;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node = (function(_super) {
  __extends(Node, _super);

  function Node(app, $node) {
    var template;
    this.app = app;
    this.$node = $node;
    this.corkboardWidth = 3000;
    this.corkboardHeight = 3000;
    this.svg = new Giraf.View.Expert.Node.SVG(app, this.corkboardWidth, this.corkboardHeight);
    template = _.template("<div class=\"node-corkboard-container\">\n  <div class=\"node-corkboard\">\n    <div id=\"node_corkboard_svg\"></div>\n  </div>\n</div>");
    $node.append(template());
    $node.find(".node-corkboard").css("width", "" + this.corkboardWidth + "px").css("height", "" + this.corkboardHeight + "px");
    $node.on("drop", (function(_this) {
      return function(event) {
        var oe, referer_uuid;
        oe = event.originalEvent;
        referer_uuid = oe.dataTransfer.getData("referer_uuid");
        if (referer_uuid) {
          return _this.appendComposition(app.model.get(referer_uuid), oe.offsetX, oe.offsetY);
        }
      };
    })(this));
  }

  Node.prototype.appendPoint = function(x, y) {
    var d;
    d = $.Deferred();
    if (x == null) {
      x = this.$node.scrollLeft() + this.$node.width() / 2;
    }
    if (y == null) {
      y = this.$node.scrollTop() + this.$node.height() / 2;
    }
    this.svg.addPoint(x, y);
    d.resolve();
    return d.promise();
  };

  Node.prototype.appendComposition = function(referer, x, y) {
    var d;
    d = $.Deferred();
    if (x == null) {
      x = this.$node.scrollLeft() + this.$node.width() / 2;
    }
    if (y == null) {
      y = this.$node.scrollTop() + this.$node.height() / 2;
    }
    this.svg.addComposition(referer, x, y);
    d.resolve();
    return d.promise();
  };

  Node.prototype.select = function(uuid) {
    var d;
    d = $.Deferred();
    _.each(this.svg.pieces, (function(_this) {
      return function(v, k) {
        return v.select(k === uuid);
      };
    })(this));
    d.resolve();
    return d.promise();
  };

  return Node;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node.SVG = (function(_super) {
  __extends(SVG, _super);

  SVG.D3 = {};

  SVG.pieces = {};

  SVG.hoveredContent = null;

  function SVG(app, width, height) {
    this.app = app;
    this.width = width;
    this.height = height;
    this.D3 = {};
    this.pieces = {};
    $((function(_this) {
      return function() {
        _this.D3.svg = d3.select("#node_corkboard_svg").append("svg").attr("width", width).attr("height", height);
        _this.D3.svg.defs = _this.D3.svg.append("defs");
        _this.D3.svg.nodeLayer = _this.D3.svg.append("g");
        _this.D3.svg.contentLayer = _this.D3.svg.append("g").on("mousemove", function() {
          var $node, uuid, _ref;
          $node = $(d3.event.target);
          uuid = (_ref = $node.parents("[data-uuid]")) != null ? _ref.attr("data-uuid") : void 0;
          return _this.hoveredContent = uuid != null ? uuid : null;
        });
        _this.D3.svg.contentLayer.append("rect").attr({
          x: 0,
          y: 0,
          width: width,
          height: height,
          fill: "transparent"
        });
        return _this.D3.svg.overLayer = _this.D3.svg.append("g");
      };
    })(this));
  }

  SVG.prototype.addComposition = function(referer, x, y) {
    var piece, uuid;
    x = Math.min(Math.max(x, 0), this.width);
    y = Math.min(Math.max(y, 0), this.height);
    piece = null;
    uuid = Giraf.Tools.uuid();
    if (referer instanceof Giraf.Model.Composition) {
      piece = new Giraf.View.Expert.Node.Piece.Composition(this, uuid, referer);
    }
    if (piece != null) {
      this.pieces[uuid] = piece;
      return piece.draw().move(x, y);
    }
  };

  SVG.prototype.addPoint = function(x, y) {
    var piece, uuid;
    x = Math.min(Math.max(x, 0), this.width);
    y = Math.min(Math.max(y, 0), this.height);
    uuid = Giraf.Tools.uuid();
    piece = new Giraf.View.Expert.Node.Piece.Point(this, uuid);
    this.pieces[uuid] = piece;
    return piece.draw().move(x, y);
  };

  SVG.prototype.addArrow = function(from, to) {
    var arrow, cdn;
    if ((from == null) && (to == null)) {
      return;
    }
    arrow = {};
    if (from != null) {
      arrow.from = from;
    }
    if (to != null) {
      arrow.to = to;
    }
    cdn = this.getLineCoordinate(from, to);
    arrow.line = this.svg.line(cdn.x1, cdn.y1, cdn.x2, cdn.y2).stroke({
      width: 2
    });
    return this.arrows.push(arrow);
  };

  SVG.prototype.updateArrow = function(moveObject) {
    return this.arrows.forEach((function(_this) {
      return function(arrow) {
        var cdn, _ref, _ref1;
        if ((moveObject == null) || (((_ref = arrow.from) != null ? _ref.uuid : void 0) === moveObject.uuid || ((_ref1 = arrow.to) != null ? _ref1.uuid : void 0) === moveObject.uuid)) {
          cdn = _this.getLineCoordinate(arrow.from, arrow.to);
          return arrow.line.plot(cdn.x1, cdn.y1, cdn.x2, cdn.y2);
        }
      };
    })(this));
  };

  SVG.prototype.getLineCoordinate = function(from, to) {
    var cdn;
    if ((from == null) && (to == null)) {
      return;
    }
    cdn = {};
    if (from != null) {
      cdn.x1 = from.x;
      cdn.y1 = from.y;
      if (to != null) {
        cdn.x2 = to.x;
        cdn.y2 = to.y;
      } else {
        cdn.x2 = from.x + 100;
        cdn.y2 = from.y;
      }
    } else {
      cdn.x1 = to.x - 100;
      cdn.y1 = to.y;
      cdn.x2 = to.x;
      cdn.y2 = to.y;
    }
    return cdn;
  };

  SVG.prototype.getShadowFilterId = function() {
    var idName;
    idName = "shadow";
    if (this.d3shadow != null) {
      return idName;
    }
    this.d3shadow = this.D3.svg.defs.append("filter").attr({
      id: idName,
      width: "200%",
      height: "200%"
    });
    this.d3shadow.append("feOffset").attr({
      "in": "SourceAlpha",
      dx: 0,
      dy: 5,
      result: "offset"
    });
    this.d3shadow.append("feGaussianBlur").attr({
      "in": "offset",
      result: "blur",
      stdDeviation: 4
    });
    this.d3shadow.append("feBlend").attr({
      "in": "SourceGraphic",
      in2: "blur",
      mode: "normal"
    });
    return idName;
  };

  return SVG;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node.Piece = (function(_super) {
  __extends(Piece, _super);

  function Piece() {
    return Piece.__super__.constructor.apply(this, arguments);
  }

  Piece.x = 0;

  Piece.y = 0;

  Piece.color = {
    body: "#ebebeb",
    line: "#ebebeb",
    composition_bg: "#577354",
    point_bg: "#ab6e49"
  };

  return Piece;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node.Piece.Content = (function(_super) {
  __extends(Content, _super);

  function Content(svg) {
    this.svg = svg;
    this.controllable = true;
  }

  Content.prototype.controll = function(bool) {
    this.controllable = bool;
    return this;
  };

  Content.prototype.select = function(bool) {};

  Content.prototype.target = function(bool) {};

  return Content;

})(Giraf.View.Expert.Node.Piece);

Giraf.View.Expert.Node.Piece.Over = (function(_super) {
  __extends(Over, _super);

  function Over(svg) {
    this.svg = svg;
  }

  return Over;

})(Giraf.View.Expert.Node.Piece);

Giraf.View.Expert.Node.Piece.Composition = (function(_super) {
  var style;

  __extends(Composition, _super);

  Composition.destination = null;

  style = {
    width: 120,
    height: 25 + 70 + 4,
    rect: {
      radius: 4,
      color: Composition.color.composition_bg
    },
    text: {
      x: 60,
      y: 13,
      fontSize: 11,
      fontWeight: 20,
      color: Composition.color.body
    },
    image: {
      x: 0,
      y: 25,
      width: 120,
      height: 70
    },
    hook: {
      x: 120,
      y: 13,
      r: 5,
      color: Composition.color.line
    },
    target: {
      width: 2,
      color: Composition.color.line
    }
  };

  function Composition(svg, uuid, referer) {
    this.svg = svg;
    this.uuid = uuid;
    Composition.__super__.constructor.call(this, svg);
    this.app = svg.app;
    this.referer_uuid = referer.uuid;
    this.d3svg = svg.D3.svg;
  }

  Composition.prototype.move = function(x, y) {
    var _ref;
    this.x = Math.min(Math.max(x, 0), this.svg.width);
    this.y = Math.min(Math.max(y, 0), this.svg.height);
    if ((_ref = this.d3composition) != null) {
      _ref.attr("transform", "translate(" + this.x + ", " + this.y + ")");
    }
    return this;
  };

  Composition.prototype.draw = function() {
    $((function(_this) {
      return function() {
        var d3compositionEventHandler, d3hookEventHandler, _ref;
        d3compositionEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _this.controll(false);
          return _this.d3svg.attr("cursor", "move");
        }).on("drag", function() {
          return _this.move(d3.event.x, d3.event.y);
        }).on("dragend", function() {
          _this.controll(true);
          return _this.d3svg.attr("cursor", null);
        });
        d3hookEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _.each(_this.svg.pieces, function(v) {
            return v.controll(false);
          });
          _this.d3svg.attr("cursor", "none");
          _this.arrow = new Giraf.View.Expert.Node.Piece.Arrow(_this.svg);
          return _this.arrow.draw().move(_this.x + (-style.width / 2) + style.hook.x, _this.y + (-style.height / 2) + style.hook.y, _this.x + (-style.width / 2) + style.hook.x, _this.y + (-style.height / 2) + style.hook.y);
        }).on("drag", function() {
          _.each(_this.svg.pieces, function(v, k) {
            if (_this.svg.hoveredContent === k && k !== _this.uuid) {
              return v.target(true);
            } else {
              return v.target(false);
            }
          });
          return _this.arrow.move(_this.x + (-style.width / 2) + style.hook.x, _this.y + (-style.height / 2) + style.hook.y, _this.x + d3.event.x, _this.y + d3.event.y);
        }).on("dragend", function() {
          _this.d3svg.attr("cursor", null);
          _.each(_this.svg.pieces, function(v) {
            return v.target(false).controll(true);
          });
          _this.arrow.remove();
          return _this.arrow = null;
        });
        _this.d3composition = _this.d3svg.contentLayer.append("g").attr({
          "data-uuid": _this.uuid,
          "data-action-dblclick": "expert__change_target"
        }).style("filter", "url(#" + (_this.svg.getShadowFilterId()) + ")").call(d3compositionEventHandler);
        _this.d3rect = _this.d3composition.append("rect").attr({
          x: -style.width / 2,
          y: -style.height / 2,
          width: style.width,
          height: style.height,
          rx: style.rect.radius,
          ry: style.rect.radius,
          fill: style.rect.color
        });
        _this.d3text = _this.d3composition.append("text").text((_ref = _this.app.model.get(_this.referer_uuid)) != null ? _ref.name : void 0).attr({
          x: (-style.width / 2) + style.text.x,
          y: (-style.height / 2) + style.text.y,
          "font-size": style.text.fontSize,
          "font-weight": style.text.fontWeight,
          "text-anchor": "middle",
          "dominant-baseline": "middle",
          "fill": style.text.color
        });
        _this.d3image = _this.d3composition.append("image").attr({
          x: (-style.width / 2) + style.image.x,
          y: (-style.height / 2) + style.image.y,
          width: style.image.width,
          height: style.image.height
        });
        return _this.d3circleHook = _this.d3composition.append("circle").attr({
          cx: (-style.width / 2) + style.hook.x,
          cy: (-style.height / 2) + style.hook.y,
          r: style.hook.r,
          fill: style.hook.color
        }).call(d3hookEventHandler);
      };
    })(this));
    return this;
  };

  Composition.prototype.target = function(bool) {
    var _ref;
    Composition.__super__.target.call(this, bool);
    if (bool) {
      if (this.d3hover == null) {
        this.d3hover = this.d3composition.append("rect").attr({
          x: -style.width / 2,
          y: -style.height / 2,
          width: style.width,
          height: style.height,
          rx: style.rect.radius,
          ry: style.rect.radius,
          fill: "transparent",
          stroke: style.target.color,
          "stroke-width": style.target.width
        });
      }
    } else {
      if ((_ref = this.d3hover) != null) {
        _ref.remove();
      }
      this.d3hover = null;
    }
    return this;
  };

  Composition.prototype.select = function(bool) {
    var _ref, _ref1;
    Composition.__super__.select.call(this, bool);
    if (bool) {
      if ((_ref = this.d3rect) != null) {
        _ref.attr({
          stroke: "orange",
          "stroke-width": 1
        });
      }
      this.app.view.expert.effect.changeTarget(this.referer_uuid);
    } else {
      if ((_ref1 = this.d3rect) != null) {
        _ref1.attr({
          "stroke-width": 0
        });
      }
    }
    return this;
  };

  return Composition;

})(Giraf.View.Expert.Node.Piece.Content);

Giraf.View.Expert.Node.Piece.Point = (function(_super) {
  var style;

  __extends(Point, _super);

  Point.source = null;

  style = {
    width: 32,
    height: 32,
    rect: {
      radius: 4,
      color: Point.color.point_bg
    },
    hook: {
      x: 32 / 2,
      y: 32 / 2,
      r: 5,
      color: Point.color.line
    },
    target: {
      width: 2,
      color: Point.color.line
    }
  };

  function Point(svg, uuid) {
    this.svg = svg;
    this.uuid = uuid;
    Point.__super__.constructor.call(this, svg);
    this.d3svg = svg.D3.svg;
  }

  Point.prototype.move = function(x, y) {
    var _ref;
    this.x = Math.min(Math.max(x, 0), this.svg.width);
    this.y = Math.min(Math.max(y, 0), this.svg.height);
    if ((_ref = this.d3point) != null) {
      _ref.attr("transform", "translate(" + this.x + ", " + this.y + ")");
    }
    return this;
  };

  Point.prototype.draw = function() {
    $((function(_this) {
      return function() {
        var d3hookEventHandler, d3pointEventHandler;
        d3pointEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _this.controll(false);
          return _this.d3svg.attr("cursor", "move");
        }).on("drag", function() {
          return _this.move(d3.event.x, d3.event.y);
        }).on("dragend", function() {
          _this.controll(true);
          return _this.d3svg.attr("cursor", null);
        });
        d3hookEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _.each(_this.svg.pieces, function(v) {
            return v.controll(false);
          });
          _this.d3svg.attr("cursor", "none");
          _this.arrow = new Giraf.View.Expert.Node.Piece.Arrow(_this.svg);
          return _this.arrow.draw().move(_this.x + (-style.width / 2) + style.hook.x, _this.y + (-style.height / 2) + style.hook.y, _this.x + (-style.width / 2) + style.hook.y, _this.y + (-style.height / 2) + style.hook.y);
        }).on("drag", function() {
          _.each(_this.svg.pieces, function(v, k) {
            if (_this.svg.hoveredContent === k && k !== _this.uuid) {
              return v.target(true);
            } else {
              return v.target(false);
            }
          });
          return _this.arrow.move(_this.x + (-style.width / 2) + style.hook.x, _this.y + (-style.height / 2) + style.hook.y, _this.x + d3.event.x, _this.y + d3.event.y);
        }).on("dragend", function() {
          _this.d3svg.attr("cursor", null);
          _.each(_this.svg.pieces, function(v) {
            return v.target(false).controll(true);
          });
          _this.arrow.remove();
          return _this.arrow = null;
        });
        _this.d3point = _this.d3svg.contentLayer.append("g").attr({
          "data-uuid": _this.uuid
        }).style("filter", "url(#" + (_this.svg.getShadowFilterId()) + ")").call(d3pointEventHandler);
        _this.d3rect = _this.d3point.append("rect").attr({
          x: -style.width / 2,
          y: -style.height / 2,
          width: style.width,
          height: style.height,
          rx: style.rect.radius,
          ry: style.rect.radius,
          fill: style.rect.color
        });
        return _this.d3circleHook = _this.d3point.append("circle").attr({
          cx: (-style.width / 2) + style.hook.x,
          cy: (-style.height / 2) + style.hook.y,
          r: style.hook.r,
          fill: style.hook.color
        }).call(d3hookEventHandler);
      };
    })(this));
    return this;
  };

  Point.prototype.target = function(bool) {
    var _ref, _ref1;
    Point.__super__.target.call(this, bool);
    if (bool) {
      if (this.d3hover == null) {
        this.d3hover = (_ref = this.d3point) != null ? _ref.append("rect").attr({
          x: -style.width / 2,
          y: -style.height / 2,
          width: style.width,
          height: style.height,
          rx: style.rect.radius,
          ry: style.rect.radius,
          fill: "transparent",
          stroke: style.target.color,
          "stroke-width": style.target.width
        }) : void 0;
      }
    } else {
      if ((_ref1 = this.d3hover) != null) {
        _ref1.remove();
      }
      this.d3hover = null;
    }
    return this;
  };

  Point.prototype.select = function(bool) {
    var _ref, _ref1;
    Point.__super__.select.call(this, bool);
    if (bool) {
      if ((_ref = this.d3rect) != null) {
        _ref.attr({
          stroke: "orange",
          "stroke-width": 1
        });
      }
    } else {
      if ((_ref1 = this.d3rect) != null) {
        _ref1.attr({
          "stroke-width": 0
        });
      }
    }
    return this;
  };

  return Point;

})(Giraf.View.Expert.Node.Piece.Content);

Giraf.View.Expert.Node.Piece.Arrow = (function(_super) {
  var style;

  __extends(Arrow, _super);

  Arrow.x1 = 0;

  Arrow.y1 = 0;

  Arrow.x2 = 0;

  Arrow.y2 = 0;

  style = {
    tail: {
      r: 5,
      color: Arrow.color.line
    },
    head: {
      refX: 0,
      refY: 3,
      markerWidth: 6,
      markerHeight: 6,
      d: "M0,0 V6 L6,3 Z",
      color: Arrow.color.line
    },
    stroke: {
      width: 2,
      dasharray: "7, 5",
      color: Arrow.color.line
    }
  };

  function Arrow(svg) {
    this.svg = svg;
    Arrow.__super__.constructor.call(this, svg);
    this.uuid = Giraf.Tools.uuid();
    this.d3svg = svg.D3.svg;
  }

  Arrow.prototype.move = function(x1, y1, x2, y2) {
    var _ref;
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    if ((_ref = this.d3arrow) != null) {
      _ref.attr({
        x1: this.x1,
        y1: this.y1,
        x2: this.x2,
        y2: this.y2
      });
    }
    return this;
  };

  Arrow.prototype.draw = function() {
    $((function(_this) {
      return function() {
        _this.d3arrowTail = _this.d3svg.defs.append("marker").attr({
          id: "" + _this.uuid + "_arrow_tail",
          refX: style.tail.r / 2,
          refY: style.tail.r / 2,
          markerWidth: style.tail.r,
          markerHeight: style.tail.r,
          orient: "auto"
        });
        _this.d3arrowTail.append("circle").attr({
          cx: style.tail.r / 2,
          cy: style.tail.r / 2,
          r: style.tail.r / 2,
          fill: style.tail.color
        });
        _this.d3arrowHead = _this.d3svg.defs.append("marker").attr({
          id: "" + _this.uuid + "_arrow_head",
          refX: style.head.refX,
          refY: style.head.refY,
          markerWidth: style.head.markerWidth,
          markerHeight: style.head.markerHeight,
          orient: "auto"
        });
        _this.d3arrowHead.append("path").attr({
          d: style.head.d,
          fill: style.head.color
        });
        return _this.d3arrow = _this.d3svg.overLayer.append("line").attr({
          x1: _this.x1,
          y1: _this.y1,
          x2: _this.x2,
          y2: _this.y2,
          stroke: style.stroke.color,
          "stroke-width": style.stroke.width,
          "stroke-dasharray": style.stroke.dasharray,
          "marker-start": "url(#" + _this.uuid + "_arrow_tail)",
          "marker-end": "url(#" + _this.uuid + "_arrow_head)"
        });
      };
    })(this));
    return this;
  };

  Arrow.prototype.remove = function() {
    var _ref, _ref1, _ref2;
    if ((_ref = this.d3arrowTail) != null) {
      _ref.remove();
    }
    if ((_ref1 = this.d3arrowHead) != null) {
      _ref1.remove();
    }
    if ((_ref2 = this.d3arrow) != null) {
      _ref2.remove();
    }
    return this;
  };

  return Arrow;

})(Giraf.View.Expert.Node.Piece.Over);

Giraf.View.Expert.Project = (function(_super) {
  __extends(Project, _super);

  function Project(app, $project) {
    var template;
    this.app = app;
    this.$project = $project;
    this.pieces = {};
    template = _.template("<div class=\"project-header\">\n</div>");
    $project.append(template());
  }

  Project.prototype.append = function(referer) {
    var piece, uuid;
    piece = null;
    uuid = Giraf.Tools.uuid();
    if (referer instanceof Giraf.Model.File) {
      piece = new Giraf.View.Expert.Project.Piece.File(this.app, uuid, referer);
    }
    if (referer instanceof Giraf.Model.Composition) {
      piece = new Giraf.View.Expert.Project.Piece.Composition(this.app, uuid, referer);
    }
    if (piece != null) {
      this.pieces[uuid] = piece;
      this.$project.append(piece.html());
      return uuid;
    }
  };

  Project.prototype.select = function(uuid) {
    var d;
    d = $.Deferred();
    _.each(this.pieces, (function(_this) {
      return function(v, k) {
        return v.select(k === uuid);
      };
    })(this));
    d.resolve();
    return d.promise();
  };

  return Project;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Project.Piece = (function() {
  function Piece(app, uuid, referer, type, title) {
    this.app = app;
    this.uuid = uuid;
    this.type = type;
    this.title = title;
    this.referer_uuid = referer.uuid;
    $(referer).on("statusChanged", (function(_this) {
      return function(event, status) {
        var $target;
        $target = $(".project-piece[data-uuid=" + uuid + "]");
        switch (status) {
          case "loading":
            return $target.addClass("loading");
          case "normal":
            return $target.removeClass("loading");
          case "dying":
            return $target.remove();
        }
      };
    })(this));
  }

  Piece.prototype.html = function() {
    var $rtn, template, _ref, _ref1, _ref2;
    template = _.template("<div class=\"project-piece\" draggable=\"true\" data-referer-type=\"<%- type %>\" data-uuid=\"<%- uuid %>\"\n data-action-click=\"expert__change_target\" data-action-dblclick=\"expert__project__refresh_composition\">\n  <div class=\"project-piece-content\">\n    <div class=\"project-piece-title\"><%- title %></div>\n  </div>\n  <div class=\"project-piece-thumbnail-container\">\n    <img class=\"project-piece-thumbnail\"/>\n  </div>\n</div>");
    $rtn = $(template({
      type: (_ref = this.type) != null ? _ref : "",
      uuid: (_ref1 = this.uuid) != null ? _ref1 : "",
      title: (_ref2 = this.title) != null ? _ref2 : ""
    }));
    $rtn.on("dragstart", (function(_this) {
      return function(event) {
        return event.originalEvent.dataTransfer.setData("referer_uuid", _this.referer_uuid);
      };
    })(this));
    return $rtn.get(0);
  };

  Piece.prototype.select = function(bool) {
    var $target;
    $target = $(".project-piece[data-uuid=" + this.uuid + "]");
    if (bool) {
      $target.addClass("selected");
      return this.app.view.expert.effect.changeTarget(this.referer_uuid);
    } else {
      return $target.removeClass("selected");
    }
  };

  return Piece;

})();

Giraf.View.Expert.Project.Piece.File = (function(_super) {
  __extends(File, _super);

  function File(app, uuid, referer) {
    this.app = app;
    this.uuid = uuid;
    File.__super__.constructor.call(this, app, uuid, referer, "file", referer.file.name);
  }

  File.prototype.html = function() {
    var $rtn;
    $rtn = $(File.__super__.html.call(this));
    if (this.app.model.get(this.referer_uuid).status === "loading") {
      $rtn.addClass("loading");
    }
    return $rtn.get(0);
  };

  return File;

})(Giraf.View.Expert.Project.Piece);

Giraf.View.Expert.Project.Piece.Composition = (function(_super) {
  __extends(Composition, _super);

  function Composition(app, uuid, referer) {
    this.app = app;
    this.uuid = uuid;
    Composition.__super__.constructor.call(this, app, uuid, referer, "composition", referer.name);
  }

  return Composition;

})(Giraf.View.Expert.Project.Piece);

Giraf.View.Modal = (function(_super) {
  var createButtonDOM;

  __extends(Modal, _super);

  function Modal() {}

  Modal.prototype.show = function(args) {
    var action, template;
    template = _.template("<div class=\"modal\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-scroll-area\">\n      <div class=\"modal-title\"><h3><%- title %></h3></div>\n      <div class=\"modal-content\"><%= content %></div>\n    </div>\n    <div class=\"modal-footer\">\n      <div class=\"modal-action\"><%= action %></div>\n    </div>\n  </div>\n</div>");
    if (args.title == null) {
      args.title = "";
    }
    if (args.content == null) {
      args.content = "";
    }
    action = createButtonDOM.call(this, args.action);
    $("body").append(template({
      title: args.title,
      content: args.content,
      action: action
    }));
    $(".modal-dialog").height($(".modal-title").height() + $(".modal-content").height() + 120);
    $(".modal").on({
      click: function(event) {
        var onEnd;
        if ($(event.target).hasClass("modal")) {
          onEnd = function() {
            return $(".modal").remove();
          };
          $(".modal-dialog").bind("transitionend", onEnd);
          return $(".modal").removeClass("show");
        }
      }
    });
    return setTimeout(function() {
      return $(".modal").addClass("show");
    }, 10);
  };

  createButtonDOM = function(data) {
    var arr, button, key, value;
    arr = [];
    for (key in data) {
      value = data[key];
      button = _.template("<button class=\"flat<% if (primary === true) { print(' button-primary'); } %>\">\n  <%- text %>\n</button>");
      arr.push(button({
        primary: value.primary === true,
        text: value.text
      }));
    }
    return arr.join("");
  };

  return Modal;

})(Giraf.View._base);

Giraf.View.Nav = (function(_super) {
  var $dropdowns, isActive, _selector_dropdown;

  __extends(Nav, _super);

  _selector_dropdown = "li.dropdown";

  $dropdowns = null;

  isActive = false;

  function Nav(app, $nav) {
    var self;
    this.app = app;
    this.$nav = $nav;
    $dropdowns = this.$nav.find(_selector_dropdown);
    self = this;
    $dropdowns.on("mouseenter", function() {
      if (isActive) {
        return self.active(this);
      }
    });
    $(document).on("click", function(event) {
      if (!$.contains($nav.get(0), event.target)) {
        return self.inactive();
      } else if ($(event.target).hasClass("dropdown-toggle")) {
        if (!isActive) {
          return self.active($(event.target).parent(".dropdown"));
        } else {
          return self.inactive();
        }
      }
    });
  }

  Nav.prototype.active = function(target) {
    var d;
    d = new $.Deferred;
    isActive = true;
    $dropdowns.each(function(index, element) {
      return $(element).removeClass("open");
    });
    $(target).addClass("open");
    setTimeout(function() {
      return d.resolve();
    }, 30);
    return d.promise();
  };

  Nav.prototype.inactive = function() {
    var d;
    d = new $.Deferred;
    isActive = false;
    $dropdowns.each(function(index, element) {
      return $(element).removeClass("open");
    });
    setTimeout(function() {
      return d.resolve();
    }, 30);
    return d.promise();
  };

  Nav.prototype.isActive = function() {
    return isActive;
  };

  return Nav;

})(Giraf.View._base);

Giraf.View.Quick = (function(_super) {
  var selector_preview, selector_result, selector_thumbnail, selector_timeline;

  __extends(Quick, _super);

  selector_preview = "#quick_preview";

  selector_thumbnail = "#quick_thumbnail";

  selector_timeline = "#quick_timeline";

  selector_result = "#quick_result";

  function Quick($quick) {
    this.$quick = $quick;
  }

  return Quick;

})(Giraf.View._base);

Giraf.View.Quick._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf.View._base);

app = new Giraf.App;

app.run();
