// Generated by CoffeeScript 1.8.0
var Giraf, app,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

if (typeof Giraf === "undefined" || Giraf === null) {
  Giraf = {};
}

if (Giraf._base == null) {
  Giraf._base = {};
}

if (Giraf._settings == null) {
  Giraf._settings = {};
}

if (Giraf.App == null) {
  Giraf.App = {};
}

if (Giraf.Controller == null) {
  Giraf.Controller = {};
}

if (Giraf.Controller._base == null) {
  Giraf.Controller._base = {};
}

if (Giraf.Controller.Action == null) {
  Giraf.Controller.Action = {};
}

if (Giraf.FileHandler == null) {
  Giraf.FileHandler = {};
}

if (Giraf.History == null) {
  Giraf.History = {};
}

if (Giraf.Model == null) {
  Giraf.Model = {};
}

if (Giraf.Model._base == null) {
  Giraf.Model._base = {};
}

if (Giraf.Model.Composition == null) {
  Giraf.Model.Composition = {};
}

if (Giraf.Model.File == null) {
  Giraf.Model.File = {};
}

if (Giraf.Settings == null) {
  Giraf.Settings = {};
}

if (Giraf.Settings._base == null) {
  Giraf.Settings._base = {};
}

if (Giraf.Settings.CookieBinder == null) {
  Giraf.Settings.CookieBinder = {};
}

if (Giraf.Task == null) {
  Giraf.Task = {};
}

if (Giraf.Task._base == null) {
  Giraf.Task._base = {};
}

if (Giraf.Task.CreateNewComposition == null) {
  Giraf.Task.CreateNewComposition = {};
}

if (Giraf.Task.FileLoader == null) {
  Giraf.Task.FileLoader = {};
}

if (Giraf.Task.RefreshComposition == null) {
  Giraf.Task.RefreshComposition = {};
}

if (Giraf.Task.SelectFile == null) {
  Giraf.Task.SelectFile = {};
}

if (Giraf.Thumbnail == null) {
  Giraf.Thumbnail = {};
}

if (Giraf.Thumbnails == null) {
  Giraf.Thumbnails = {};
}

if (Giraf.Timeline == null) {
  Giraf.Timeline = {};
}

if (Giraf.Timelines == null) {
  Giraf.Timelines = {};
}

if (Giraf.Tools == null) {
  Giraf.Tools = {};
}

if (Giraf.View == null) {
  Giraf.View = {};
}

if (Giraf.View._base == null) {
  Giraf.View._base = {};
}

if (Giraf.View.Expert == null) {
  Giraf.View.Expert = {};
}

if (Giraf.View.Expert._base == null) {
  Giraf.View.Expert._base = {};
}

if (Giraf.View.Expert.Composition == null) {
  Giraf.View.Expert.Composition = {};
}

if (Giraf.View.Expert.Droparea == null) {
  Giraf.View.Expert.Droparea = {};
}

if (Giraf.View.Expert.Node == null) {
  Giraf.View.Expert.Node = {};
}

if (Giraf.View.Expert.Project == null) {
  Giraf.View.Expert.Project = {};
}

if (Giraf.View.Modal == null) {
  Giraf.View.Modal = {};
}

if (Giraf.View.Nav == null) {
  Giraf.View.Nav = {};
}

if (Giraf.View.Quick == null) {
  Giraf.View.Quick = {};
}

if (Giraf.View.Quick._base == null) {
  Giraf.View.Quick._base = {};
}

Giraf._base = (function() {
  function _base() {}

  return _base;

})();

Giraf._settings = (function() {
  var captureFrameValues, gifSizeValues, gifSpeedValues;

  captureFrameValues = [1, 2, 3, 4, 6, 8, 12, 15, 24, 30];

  gifSpeedValues = [0.5, 0.8, 1, 1.2, 1.5, 2, 3, 5];

  gifSizeValues = [40, 80, 120, 240, 320, 480, 640, 720];

  function _settings($video) {
    var i, _, _i, _j, _k, _len, _len1, _len2;
    this.$video = $video;
    this.$captureFrame = $("#form_capture_frame");
    this.$gifSpeed = $("#form_gif_speed");
    this.$gifSize = $("#form_gif_size");
    this.event = {};
    for (_i = 0, _len = captureFrameValues.length; _i < _len; _i++) {
      i = captureFrameValues[_i];
      this.$captureFrame.append("<option value=" + i + ">" + i + "fps</option>");
    }
    for (_j = 0, _len1 = gifSpeedValues.length; _j < _len1; _j++) {
      i = gifSpeedValues[_j];
      this.$gifSpeed.append("<option value=" + i + ">x" + i + "</option>");
    }
    this.$gifSize.append("<option value=-1>元サイズに合わせる</option>");
    for (_k = 0, _len2 = gifSizeValues.length; _k < _len2; _k++) {
      i = gifSizeValues[_k];
      this.$gifSize.append("<option value=" + i + ">" + i + "px</option>");
    }
    this.captureFrameVal = 12;
    this.gifSpeedVal = 1;
    this.gifSizeVal = -1;
    this.effectScript = "";
    this.crop = false;
    this.$captureFrame.val(this.captureFrameVal);
    this.$gifSpeed.val(this.gifSpeedVal);
    this.$gifSize.val(this.gifSizeVal);
    this.initJcrop();
    this.initCodeMirror();

    /*@$captureFrame.bind "change", =>
      if "change" in @event then @event["change"]()
    @$gifSpeed.bind "change", =>
      if "change" in @event then @event["change"]()
    @$gifSize.bind "change", =>
      if "change" in @event then @event["change"]()
     */
    $("#modal_capture_frame").on("hidden.bs.modal", (function(_this) {
      return function() {
        return _this.$captureFrame.val(_this.captureFrameVal);
      };
    })(this));
    $("#modal_capture_frame_save").bind("click", (function(_this) {
      return function() {
        var fn, type, _ref, _results;
        _this.captureFrameVal = _this.$captureFrame.val();
        $("#modal_capture_frame").modal("hide");
        _ref = _this.event;
        _results = [];
        for (type in _ref) {
          fn = _ref[type];
          if (type === "change") {
            _results.push(fn());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    })(this));
    $("#modal_gif_size").on("hidden.bs.modal", (function(_this) {
      return function() {
        return _this.$gifSize.val(_this.gifSizeVal);
      };
    })(this));
    $("#modal_gif_size_save").bind("click", (function(_this) {
      return function() {
        _this.gifSizeVal = _this.$gifSize.val();
        return $("#modal_gif_size").modal("hide");
      };
    })(this));
    $("#modal_gif_speed").on("hidden.bs.modal", (function(_this) {
      return function() {
        return _this.$gifSpeed.val(_this.gifSpeedVal);
      };
    })(this));
    $("#modal_gif_speed_save").bind("click", (function(_this) {
      return function() {
        _this.gifSpeedVal = _this.$gifSpeed.val();
        return $("#modal_gif_speed").modal("hide");
      };
    })(this));
    $("#modal_effect").on("hide.bs.modal", (function(_this) {
      return function() {
        return _this.codeMirrorApi.setValue(_this.effectScript);
      };
    })(this));
    $("#modal_effect_save").bind("click", (function(_this) {
      return function() {
        _this.effectScript = _this.codeMirrorApi.getValue();
        return $("#modal_effect").modal("hide");
      };
    })(this));
    $(".modal-effect-preset").bind("click", {
      self: this
    }, function(event) {
      return event.data.self.codeMirrorApi.setValue(preset[parseInt($(this).attr("data-value"), 10)]);
    });
    $("#modal_crop").on("shown.bs.modal", (function(_this) {
      return function() {
        var canvas, ctx, video;
        canvas = $("<canvas>").get(0);
        ctx = canvas.getContext("2d");
        video = _this.$video.get(0);
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
        $("#modal_crop_img").get(0).onload = function() {
          return _this.initJcrop();
        };
        return $("#modal_crop_img").attr("src", canvas.toDataURL());
      };
    })(this));
    $("#modal_crop").on("hidden.bs.modal", (function(_this) {
      return function() {
        $("#form_crop").prop("checked", _this.crop);
        _this.jcropApi.destroy();
        return $("#modal_crop_img").attr("src", "");
      };
    })(this));
    $("#modal_crop_save").bind("click", (function(_this) {
      return function() {
        _this.crop = $("#form_crop").prop("checked");
        return $("#modal_crop").modal("hide");
      };
    })(this));
    $("#form_crop").bind("change", (function(_this) {
      return function() {
        if ($("#form_crop").prop("checked")) {
          _this.jcropApi.enable();
          return _this.jcropApi.setSelect([0, 0, 50, 50]);
        } else {
          _this.jcropApi.release();
          return _this.jcropApi.disable();
        }
      };
    })(this));
    _ = this;
    $(".modal-crop-aspect").bind("click", function() {
      var aspect;
      aspect = [0, 1, 4 / 3, 8 / 5, 3 / 4, 5 / 8];
      return _.jcropApi.setOptions({
        aspectRatio: aspect[parseInt($(this).attr("data-value"), 10)]
      });
    });
  }

  _settings.prototype.initJcrop = function() {
    this.jcropApi = $.Jcrop("#modal_crop_img");
    $("#modal_crop_img").Jcrop({
      onChange: (function(_this) {
        return function(c) {
          return _this.cropCoords = c;
        };
      })(this),
      onSelect: (function(_this) {
        return function(c) {
          return _this.cropCoords = c;
        };
      })(this)
    });
    if (this.crop) {
      return this.jcropApi.setSelect([this.cropCoords.x, this.cropCoords.y, this.cropCoords.x2, this.cropCoords.y2]);
    } else {
      this.jcropApi.release();
      return this.jcropApi.disable();
    }
  };

  _settings.prototype.initCodeMirror = function() {
    return this.codeMirrorApi = CodeMirror($("#form_effect_holder").get(0), {
      mode: "javascript",
      indentUnit: 4,
      lineNumbers: true,
      styleActiveLine: true,
      matchBrackets: true,
      autoCloseBrackets: true
    });
  };

  _settings.prototype.bind = function(type, fn) {
    return this.event[type] = fn;
  };

  _settings.prototype.getCaptureFrame = function() {
    return this.captureFrameVal;
  };

  _settings.prototype.getGifSpeed = function() {
    return this.gifSpeedVal;
  };

  _settings.prototype.getGifSize = function(size) {
    if (parseInt(this.$gifSize.val(), 10) === -1) {
      return size;
    } else {
      return this.$gifSize.val();
    }
  };

  _settings.prototype.getEffectScript = function() {
    return this.effectScript;
  };

  _settings.prototype.isCrop = function() {
    return this.crop;
  };

  _settings.prototype.getCropCoord = function() {
    return this.cropCoords;
  };

  _settings.prototype.disable = function(bool) {
    if (bool) {
      return $("#config").addClass("disabled");
    } else {
      return $("#config").removeClass("disabled");
    }
  };

  return _settings;

})();

Giraf.App = (function(_super) {
  __extends(App, _super);

  function App() {
    this.run = __bind(this.run, this);
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.run = function() {
    return $((function(_this) {
      return function() {
        _this.model = new Giraf.Model;
        _this.view = new Giraf.View(_this);
        return _this.settings = new Giraf.Settings(_this);
      };
    })(this));
  };

  App.prototype._run = function() {
    var $backVideo, $video, gifjsWorkerDist, preset;
    $video = $("#video");
    $backVideo = $("<video>");
    gifjsWorkerDist = "js/lib/gif.js/dist/gif.worker.js";
    preset = ["var imageData = context.getImageData(0, 0, resultWidth, resultHeight);\nvar data = imageData.data;\n\nfor (i=0; i < data.length; i+=4) {\n    var black = 0.34*data[i] + 0.5*data[i+1] + 0.16*data[i+2];\n    data[i] = black;\n    data[i+1] = black;\n    data[i+2] = black;\n}\ncontext.putImageData(imageData, 0, 0);", "var imageData = context.getImageData(0, 0, resultWidth, resultHeight);\nvar data = imageData.data;\nvar gain = 5; //数字が大きくなるとコントラストが強くなる\n\nfor (i=0; i < data.length; i++) {\n    data[i] = 255 / (1 + Math.exp((128 - data[i]) / 128.0 * gain));\n}\ncontext.putImageData(imageData, 0, 0);", "var imageData = context.getImageData(0, 0, resultWidth, resultHeight);\nvar data = imageData.data;\nvar diff = 30; //数字が大きくなるとより明るくなる\n\nfor (i=0; i < data.length; i++) {\n    data[i] += diff;\n}\ncontext.putImageData(imageData, 0, 0);", "var imageData = context.getImageData(0, 0, resultWidth, resultHeight);\nvar data = imageData.data;\nvar temp = 1.3; //1より大きくなると赤っぽく、小さくなると青っぽくなる\n\nfor (i=0; i < data.length; i+=4) {\n    data[i] *= temp;    // red\n    data[i+2] /= temp;  // blue\n}\ncontext.putImageData(imageData, 0, 0);", "var text = \"ちくわ大明神\";\nvar x = 0;\nvar y = resultHeight / 2;\n\ncontext.font = \"bold 48px sans-serif\";\ncontext.fillStyle = \"rgba(255, 131, 0, 0.7)\";\ncontext.fillText(text, x, y);"];
    return $(function() {
      var fileHandler, loadVideo, rendering, settings, timelines;
      rendering = false;
      fileHandler = new Giraf.FileHandler({
        $container: $("#drop_here"),
        $file_input: $("#form_video")
      });
      settings = new Giraf.Settings($video);
      $(fileHandler).on('enter', function() {
        return $('#drop_here').addClass('active');
      }).on('leave', function() {
        return $('#drop_here').removeClass('active');
      }).on('data_url_prepared', function() {
        $('#drop_here').removeClass('active');
        return $('#drop_here').remove();
      });
      loadVideo = function(url) {
        var deferred;
        deferred = $.Deferred();
        $video.attr("src", url);
        $backVideo.attr("src", url);
        $video.one('canplay', function() {
          $video.removeClass("hidden");
          return deferred.resolve($video);
        });
        $video.one('error', function(error) {
          return deferred.fail(error);
        });
        return deferred.promise();
      };
      timelines = new Giraf.Timelines($video);
      $("#timeline_holder").sortable({
        axis: "x",
        update: function() {
          return timelines.updateOrder();
        }
      });
      return $(fileHandler).bind("data_url_prepared", function(event, urls) {
        return (loadVideo(urls[0])).done(function(image_url) {
          var finalize, renderThumbnail, thumbnails, toggleVideoPlay;
          thumbnails = new Giraf.Thumbnails(this, $video, $backVideo);
          settings.disable(false);
          $("#capture").removeClass("disabled");
          renderThumbnail = function() {
            if (!rendering) {
              return thumbnails.update(settings);
            }
          };
          toggleVideoPlay = function() {
            var video;
            video = $video.get(0);
            if (video.paused) {
              return video.play();
            } else {
              return video.pause();
            }
          };
          renderThumbnail();
          $video.bind("pause", (function(_this) {
            return function() {
              return renderThumbnail();
            };
          })(this));
          $video.bind("seeked", (function(_this) {
            return function() {
              return renderThumbnail();
            };
          })(this));
          settings.bind("change", (function(_this) {
            return function() {
              return renderThumbnail();
            };
          })(this));
          $video.bind("click", function() {});
          $("#start").click(function() {
            var time;
            time = $video.get(0).currentTime;
            timelines.setStartTime(time);
            return timelines.updateMakeButton();
          });
          $("#stop").click(function() {
            var time;
            time = $video.get(0).currentTime;
            timelines.setStopTime(time);
            return timelines.updateMakeButton();
          });
          $("#refresh").click(function() {
            return renderThumbnail();
          });
          finalize = (function(_this) {
            return function() {
              $video.get(0).controls = true;
              rendering = false;
              settings.disable(false);
              timelines.updateMakeButton();
              return $("#capture").removeClass("disabled");
            };
          })(this);
          $("#make").click(function() {
            var arr, canvas, context, cropCoord, deferred, firstTime, frameNumber, gif, ratio, resultHeight, resultWidth, sourceHeight, sourceWidth, video;
            video = $video.get(0);
            cropCoord = settings.getCropCoord();
            sourceWidth = settings.isCrop() ? cropCoord.w : video.videoWidth;
            sourceHeight = settings.isCrop() ? cropCoord.h : video.videoHeight;
            ratio = (settings.getGifSize(sourceWidth)) / sourceWidth;
            resultWidth = settings.getGifSize(sourceWidth);
            resultHeight = sourceHeight * ratio;
            gif = new GIF({
              workers: 4,
              workerScript: gifjsWorkerDist,
              quality: 10,
              width: resultWidth,
              height: resultHeight,
              dither: false,
              pattern: true,
              globalPalette: true
            });
            gif.on("progress", function(p) {
              $("#progress_2").css("width", p * 100 + "%");
              return $("#progress_1").css("width", (1 - p) * 100 + "%");
            });
            gif.on("finished", function(blob) {
              var img;
              img = $("#result_image").get(0);
              img.src = URL.createObjectURL(blob);
              $("#result_status").text("Rendering finished : Filesize " + (blob.size >= 1000000 ? "" + ((blob.size / 1000000).toFixed(2)) + "MB" : "" + ((blob.size / 1000).toFixed(2)) + "KB"));
              return finalize();
            });
            video.controls = false;
            video.pause();
            $("#make").addClass("disabled");
            $("#capture").addClass("disabled");
            canvas = $("<canvas>").get(0);
            context = canvas.getContext("2d");
            canvas.width = resultWidth;
            canvas.height = resultHeight;
            rendering = true;
            settings.disable(true);
            arr = timelines.getFrameList(settings);
            frameNumber = arr.length;
            firstTime = arr[0];
            $("#progress_1").css("width", "0");
            $("#progress_2").css("width", "0");
            if (frameNumber < 2) {
              finalize();
              return;
            }
            deferred = $.Deferred();
            deferred.then(function() {
              var _deferred;
              if (video.currentTime === arr[0]) {
                _deferred = $.Deferred();
                $video.on("timeupdate", (function(_this) {
                  return function() {
                    $video.off("timeupdate");
                    return _deferred.resolve();
                  };
                })(this));
                video.currentTime = arr[1];
                return _deferred;
              }
            }).then(function() {
              $video.on("timeupdate", (function(_this) {
                return function() {
                  var drawDeferred;
                  drawDeferred = $.Deferred();
                  if (arr.length === 0) {
                    $video.off("timeupdate");
                    gif.render();
                    return;
                  }
                  $("#progress_1").css("width", (frameNumber - arr.length) / frameNumber * 100 + "%");
                  if (settings.isCrop()) {
                    context.drawImage(video, cropCoord.x, cropCoord.y, cropCoord.w, cropCoord.h, 0, 0, resultWidth, resultHeight);
                  } else {
                    context.drawImage(video, 0, 0, resultWidth, resultHeight);
                  }
                  if (settings.getEffectScript() !== "") {
                    eval(settings.getEffectScript());
                  }
                  gif.addFrame(canvas, {
                    copy: true,
                    delay: 1000.0 / settings.getCaptureFrame() / settings.getGifSpeed()
                  });
                  if (arr.length === 1) {
                    arr.shift();
                    return video.currentTime = firstTime;
                  } else {
                    arr.shift();
                    return video.currentTime = arr[0];
                  }
                };
              })(this));
              return video.currentTime = arr[0];
            });
            return deferred.resolve();
          });
          return $("#capture").click(function() {
            var canvas, context, cropCoord, ratio, resultHeight, resultWidth, sourceHeight, sourceWidth, video;
            video = $video.get(0);
            cropCoord = settings.getCropCoord();
            sourceWidth = settings.isCrop() ? cropCoord.w : video.videoWidth;
            sourceHeight = settings.isCrop() ? cropCoord.h : video.videoHeight;
            ratio = (settings.getGifSize(sourceWidth)) / sourceWidth;
            resultWidth = settings.getGifSize(sourceWidth);
            resultHeight = sourceHeight * ratio;
            canvas = $("<canvas>").get(0);
            context = canvas.getContext("2d");
            canvas.width = resultWidth;
            canvas.height = resultHeight;
            if (settings.isCrop()) {
              context.drawImage(video, cropCoord.x, cropCoord.y, cropCoord.w, cropCoord.h, 0, 0, resultWidth, resultHeight);
            } else {
              context.drawImage(video, 0, 0, resultWidth, resultHeight);
            }
            if (settings.getEffectScript() !== "") {
              eval(settings.getEffectScript());
            }
            return $("#result_image").attr("src", canvas.toDataURL());
          });
        });
      });
    });
  };

  return App;

})(Giraf._base);

Giraf.Controller._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.Controller.Action = (function(_super) {
  __extends(Action, _super);

  function Action(app, action, args) {
    var fileList, piece, task;
    switch (action) {
      case "drop__import_file":
        fileList = args.fileList;
        task = new Giraf.Task.FileLoader;
        task.run(app, fileList).fail(function() {
          return console.log("failed");
        });
        break;
      case "expert__project__change_target":
        console.log(args);
        break;
      case "expert__project__refresh_composition":
        piece = app.view.expert.project.pieces[$(args.element).attr("data-uuid")];
        task = new Giraf.Task.RefreshComposition;
        task.run(app, piece.referer_uuid).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__append_point":
        app.view.nav.inactive().then(function() {
          return app.view.expert.node.appendPoint();
        }).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__import_file":
        app.view.nav.inactive().then(function() {
          task = new Giraf.Task.SelectFile;
          return task.run(app);
        }).then(function(fileList) {
          task = new Giraf.Task.FileLoader;
          return task.run(app, fileList);
        }).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__new_composition":
        app.view.nav.inactive().then(function() {
          task = new Giraf.Task.CreateNewComposition;
          return task.run(app);
        }).fail(function() {
          return console.log("failed");
        });
        break;
      case "nav__hoge":
        app.view.nav.inactive().then(function() {
          var modal;
          modal = new Giraf.View.Modal;
          return modal.show({
            title: "たいとる",
            content: "<b>ああああ</b>いいいい",
            action: {
              yes: {
                text: "はい",
                primary: true
              },
              no: {
                text: "いいえ"
              }
            }
          });
        });
        break;
      default:
        console.log("Action '" + action + "' is not defined.");
    }
  }

  return Action;

})(Giraf.Controller._base);

Giraf.FileHandler = (function() {
  function FileHandler(args) {
    this.$container = args.$container;
    if (!this.$container) {
      throw "$container required";
    }
    this.$file_input = args.$file_input;
    this.bindEvents();
  }

  FileHandler.prototype.bindEvents = function() {
    this.$container.on('dragstart', (function(_this) {
      return function() {
        return true;
      };
    })(this)).on('dragover', (function(_this) {
      return function() {
        return false;
      };
    })(this)).on('dragenter', (function(_this) {
      return function(event) {
        if (_this.$container.is(event.target)) {
          ($(_this)).trigger('enter');
        }
        return false;
      };
    })(this)).on('dragleave', (function(_this) {
      return function(event) {
        if (_this.$container.is(event.target)) {
          return ($(_this)).trigger('leave');
        }
      };
    })(this)).on('drop', (function(_this) {
      return function(jquery_event) {
        var event, files;
        event = jquery_event.originalEvent;
        files = event.dataTransfer.files;
        if (files.length > 0) {
          ($(_this)).trigger('drop', [files]);
          (_this.readFiles(files)).done(function(contents) {
            return ($(_this)).trigger('data_url_prepared', [contents]);
          });
        }
        return false;
      };
    })(this));
    return this.$file_input.on('change', (function(_this) {
      return function(jquery_event) {
        return (_this.readFiles((_this.$file_input.get(0)).files)).done(function(contents) {
          return ($(_this)).trigger('data_url_prepared', [contents]);
        });
      };
    })(this));
  };

  FileHandler.prototype.readFiles = function(files) {
    var contents, i, read_all, role;
    read_all = $.Deferred();
    contents = [];
    i = 0;
    role = (function(_this) {
      return function() {
        var file;
        if (files.length <= i) {
          return read_all.resolve(contents);
        } else {
          file = files[i++];
          return (_this.readFile(file)).done(function(content) {
            return contents.push(content);
          }).always(function() {
            return role();
          });
        }
      };
    })(this);
    role();
    return read_all.promise();
  };

  FileHandler.prototype.readFile = function(file) {
    var read, reader;
    read = $.Deferred();
    reader = new FileReader;
    reader.onload = function() {
      return read.resolve(reader.result);
    };
    reader.onerror = function(error) {
      return read.reject(error);
    };
    reader.readAsDataURL(file);
    return read.promise();
  };

  return FileHandler;

})();

Giraf.History = (function(_super) {
  __extends(History, _super);

  function History() {
    return History.__super__.constructor.apply(this, arguments);
  }

  return History;

})(Giraf._base);

Giraf.Model = (function(_super) {
  __extends(Model, _super);

  function Model() {
    this.models = {};
  }

  Model.prototype.set = function(uuid, model) {
    return this.models[uuid] = model;
  };

  Model.prototype.get = function(uuid) {
    return this.models[uuid];
  };

  return Model;

})(Giraf._base);

Giraf.Model._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.Model.Compositions = (function(_super) {
  __extends(Compositions, _super);

  function Compositions() {
    return Compositions.__super__.constructor.apply(this, arguments);
  }

  Compositions.append = function(app, name) {
    var d, uuid;
    d = new $.Deferred;
    uuid = Giraf.Tools.uuid();
    app.model.set(uuid, new Giraf.Model.Composition(app, uuid, name != null ? name : "New Composition"));
    d.resolve(uuid);
    return d.promise();
  };

  return Compositions;

})(Giraf.Model._base);

Giraf.Model.Composition = (function(_super) {
  __extends(Composition, _super);

  function Composition(app, uuid, name) {
    this.app = app;
    this.uuid = uuid;
    this.name = name;
  }

  return Composition;

})(Giraf.Model._base);

Giraf.Model.Files = (function(_super) {
  __extends(Files, _super);

  function Files() {
    return Files.__super__.constructor.apply(this, arguments);
  }

  Files.append = function(app, file, content) {
    var d, uuid;
    d = new $.Deferred;
    uuid = Giraf.Tools.uuid();
    app.model.set(uuid, new Giraf.Model.File(app, uuid, file, content));
    d.resolve(uuid);
    return d.promise();
  };

  return Files;

})(Giraf.Model._base);

Giraf.Model.File = (function(_super) {
  __extends(File, _super);


  /*
    statusが変更されるときにstatusChangedが発火される
    null
    loading   ロード中（@contentがセットされていない）
    normal    ロード完了・通常状態（@contentがセットされている）
    dying     削除されるときに発火
   */

  function File(app, uuid, file, content) {
    this.app = app;
    this.uuid = uuid;
    this.file = file;
    this.content = content;
    this.status = this.content != null ? "normal" : "loading";
  }

  File.prototype.setContent = function(content) {
    this.content = content;
    this.status = "normal";
    return $(this).triggerHandler("statusChanged", this.status);
  };

  File.prototype.getContent = function() {
    return this.content;
  };

  return File;

})(Giraf.Model._base);

Giraf.Settings = (function(_super) {
  __extends(Settings, _super);

  function Settings(app) {
    var cookieBinder;
    this.app = app;
    cookieBinder = new Giraf.Settings.CookieBinder();
  }

  return Settings;

})(Giraf._base);

Giraf.Settings._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.Settings.CookieBinder = (function(_super) {
  __extends(CookieBinder, _super);

  function CookieBinder(app) {
    this.app = app;
    $.cookie.json = true;
  }

  CookieBinder.prototype.set = function(data) {
    return $.cookie('giraf', {
      version: 100,
      data: data
    });
  };

  CookieBinder.prototype.get = function() {
    return $.cookie('giraf');
  };

  CookieBinder.prototype.clear = function() {
    return $.removeCookie('giraf');
  };

  return CookieBinder;

})(Giraf.Settings._base);

Giraf.Task._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.Task.CreateNewComposition = (function() {
  function CreateNewComposition() {}

  CreateNewComposition.prototype.run = function(app) {
    var d, uuid;
    d = $.Deferred();
    uuid = null;
    Giraf.Model.Compositions.append(app).then(function(uuid_) {
      uuid = uuid_;
      app.view.expert.project.append(app.model.get(uuid));
      return d.resolve();
    }, function() {
      return d.reject();
    });
    return d.promise();
  };

  return CreateNewComposition;

})();

Giraf.Task.FileLoader = (function(_super) {
  var readFile;

  __extends(FileLoader, _super);

  function FileLoader() {
    return FileLoader.__super__.constructor.apply(this, arguments);
  }

  FileLoader.prototype.run = function(app, files) {
    var d, file, tasks, _i, _len, _ref;
    d = $.Deferred();
    tasks = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if ((_ref = file.type) !== "video/mp4" && _ref !== "image/gif" && _ref !== "image/png" && _ref !== "image/jpeg") {
        continue;
      }
      tasks.push((function() {
        var d_, uuid;
        d_ = $.Deferred();
        uuid = null;
        Giraf.Model.Files.append(app, file).then(function(uuid_) {
          var d__;
          d__ = $.Deferred();
          uuid = uuid_;
          app.view.expert.project.append(app.model.get(uuid));
          readFile.call(this, file).then(function(file, content) {
            return d__.resolve(file, content);
          });
          return d__.promise();
        }).then(function(file, content) {
          return app.model.get(uuid).setContent(content);
        }).then(function() {
          return d_.resolve();
        }, function() {
          return d_.reject();
        });
        return d_.promise();
      })());
    }
    $.when.apply($, tasks).then(function() {
      return d.resolve();
    }, function() {
      return d.reject();
    });
    return d.promise();
  };

  readFile = function(file) {
    var d, reader;
    d = $.Deferred();
    reader = new FileReader;
    reader.onload = function() {
      return d.resolve(file, reader.result);
    };
    reader.onerror = function(error) {
      return d.reject(error);
    };
    reader.readAsDataURL(file);
    return d.promise();
  };

  return FileLoader;

})(Giraf.Task._base);

Giraf.Task.RefreshComposition = (function() {
  function RefreshComposition() {}

  RefreshComposition.prototype.run = function(app, uuid) {
    var d, model, type;
    d = $.Deferred();
    model = app.model.get(uuid);
    if (model instanceof Giraf.Model.File) {
      type = null;
      switch (model.file.type) {
        case "video/mp4":
          type = "video";
          break;
        case "image/gif":
        case "image/png":
        case "image/jpeg":
          type = "img";
          break;
      }
      if (type == null) {
        d.reject();
      }
      app.view.expert.composition.refresh(type, model.content).then(function() {
        return d.resolve();
      }, function() {
        return d.reject();
      });
    }
    if (model instanceof Giraf.Model.Composition) {
      app.view.expert.composition.refresh("img", null).then(function() {
        return d.resolve();
      }, function() {
        return d.reject();
      });
    }
    return d.promise();
  };

  return RefreshComposition;

})();

Giraf.Task.SelectFile = (function(_super) {
  __extends(SelectFile, _super);

  function SelectFile() {
    return SelectFile.__super__.constructor.apply(this, arguments);
  }

  SelectFile.prototype.run = function(app) {
    var $input, d, inputId;
    d = new $.Deferred;
    inputId = "SelectFile";
    $input = $("#" + inputId);
    if ($input.get(0) == null) {
      $("body").append("<input type=\"file\" name=\"file\" id=\"" + inputId + "\" class=\"hidden\" value=\"\" multiple=\"multiple\"/>");
      $input = $("#" + inputId);
    }
    $input.on("change", function() {
      var fileList;
      fileList = $input.get(0).files;
      return d.resolve(fileList);
    });
    $input.trigger("click");
    return d.promise();
  };

  return SelectFile;

})(Giraf.Task._base);

Giraf.Thumbnail = (function() {
  function Thumbnail(app, id, $canvas, $video, $backVideo) {
    this.app = app;
    this.id = id;
    this.$canvas = $canvas;
    this.$video = $video;
    this.$backVideo = $backVideo;
    this.canvas = $canvas.get(0);
    this.context = this.canvas.getContext("2d");
    this.canvas.addEventListener("click", (function(_this) {
      return function() {
        return _this.$video.get(0).currentTime = _this.time;
      };
    })(this));
  }

  Thumbnail.prototype.update = function(time) {
    this.time = time;
    if (time >= 0 || time <= this.$video.duration) {
      return $("#thumbnail_" + this.id).addClass("loading");
    }
  };

  Thumbnail.prototype.draw = function() {
    $("#thumbnail_" + this.id).removeClass("loading");
    return this.context.drawImage(this.$backVideo.get(0), 0, 0, 320, 160);
  };

  return Thumbnail;

})();

Giraf.Thumbnails = (function() {
  function Thumbnails(app, $video, $backVideo) {
    var i, _i;
    this.app = app;
    this.$video = $video;
    this.$backVideo = $backVideo;
    this.thumbs = [];
    for (i = _i = 1; _i <= 5; i = ++_i) {
      this.thumbs.push(new Giraf.Thumbnail(this.app, i, $("#thumbnail_" + i), this.$video, this.$backVideo));
    }
  }

  Thumbnails.prototype.update = function(settings) {
    var i, time, _i;
    for (i = _i = 0; _i < 5; i = ++_i) {
      time = this.$video.get(0).currentTime + (i - 2) * (1.0 / settings.getCaptureFrame());
      this.thumbs[i].update(time);
    }
    i = 0;
    this.$backVideo.on("timeupdate", (function(_this) {
      return function() {
        if (i >= 5) {
          return _this.$backVideo.off("timeupdate");
        } else {
          _this.thumbs[i].draw();
          i++;
          return _this.$backVideo.get(0).currentTime = _this.$video.get(0).currentTime + (i - 2) * (1.0 / settings.getCaptureFrame());
        }
      };
    })(this));
    return this.$backVideo.get(0).currentTime = this.$video.get(0).currentTime - 2 * (1.0 / settings.getCaptureFrame());
  };

  return Thumbnails;

})();

Giraf.Timeline = (function() {
  function Timeline(timelines, number, $video) {
    this.timelines = timelines;
    this.number = number;
    this.$video = $video;
    this.start = null;
    this.stop = null;
    this.selected = false;
    this.$timeline = $("#timeline_skeleton").clone();
    this.$timeline.attr("id", number);
    this.$timeline.appendTo($("#timeline_holder"));
    this.startCanvas = this.$timeline.find(".timeline-start").get(0);
    this.stopCanvas = this.$timeline.find(".timeline-stop").get(0);
    this.$timeline.bind("click", (function(_this) {
      return function() {
        return timelines.setSelected(_this);
      };
    })(this));
    this.$timeline.find(".close").bind("click", (function(_this) {
      return function() {
        return _this.remove();
      };
    })(this));
  }

  Timeline.prototype.setStartTime = function(time) {
    var ctx;
    this.start = time;
    ctx = this.startCanvas.getContext("2d");
    return ctx.drawImage(this.$video.get(0), 0, 0, 320, 160);
  };

  Timeline.prototype.setStopTime = function(time) {
    var ctx;
    this.stop = time;
    ctx = this.stopCanvas.getContext("2d");
    return ctx.drawImage(this.$video.get(0), 0, 0, 320, 160);
  };

  Timeline.prototype.isValidTime = function() {
    if ((this.start != null) && (this.stop != null)) {
      return true;
    } else {
      return false;
    }
  };

  Timeline.prototype.setSelected = function(bool) {
    this.selected = bool;
    if (bool) {
      return this.$timeline.css("border-color", "red");
    } else {
      return this.$timeline.css("border-color", "");
    }
  };

  Timeline.prototype.getNumber = function() {
    return this.$timeline.attr("id");
  };

  Timeline.prototype.getSelected = function() {
    return this.selected;
  };

  Timeline.prototype.getFrameList = function(settings) {
    var arr, diff, i, time;
    if (!this.isValidTime()) {
      throw "start and stop time must fill";
    }
    arr = [];
    i = 0;
    time = this.start;
    while ((this.start <= this.stop && time <= this.stop) || (this.start > this.stop && time >= this.stop)) {
      arr.push(time);
      i++;
      diff = i / settings.getCaptureFrame();
      if (this.start <= this.stop) {
        time = this.start + diff;
      } else {
        time = this.start - diff;
      }
    }
    return arr;
  };

  Timeline.prototype.remove = function() {
    this.timelines.removeTimeline(this);
    return this.$timeline.remove();
  };

  return Timeline;

})();

Giraf.Timelines = (function() {
  function Timelines($video) {
    this.$video = $video;
    this.tls = [];
    this.number = 1;
    $("#add_timeline").bind("click", (function(_this) {
      return function() {
        _this.tls.push(new Giraf.Timeline(_this, _this.number, _this.$video));
        _this.number++;
        return _this.updateMakeButton();
      };
    })(this)).trigger("click");
    this.tls[0].setSelected(true);
  }

  Timelines.prototype.setStartTime = function(time) {
    var tl;
    tl = this.getSelected();
    if (tl != null) {
      return tl.setStartTime(time);
    }
  };

  Timelines.prototype.setStopTime = function(time) {
    var tl;
    tl = this.getSelected();
    if (tl != null) {
      return tl.setStopTime(time);
    }
  };

  Timelines.prototype.setSelected = function(tl) {
    var i, _i, _len, _ref;
    _ref = this.tls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.setSelected(false);
    }
    return tl.setSelected(true);
  };

  Timelines.prototype.getSelected = function() {
    var i, _i, _len, _ref;
    _ref = this.tls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.getSelected()) {
        return i;
      }
    }
  };

  Timelines.prototype.getFrameList = function(settings) {
    var arr, i, tl, _i, _j, _len, _len1, _ref, _ref1;
    arr = [];
    _ref = this.tls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tl = _ref[_i];
      _ref1 = tl.getFrameList(settings);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        arr.push(i);
      }
    }
    return arr;
  };

  Timelines.prototype.removeTimeline = function(tl) {
    var k, v, _ref;
    _ref = this.tls;
    for (k in _ref) {
      v = _ref[k];
      if (v === tl) {
        this.tls.splice(k, 1);
      }
    }
    return this.updateMakeButton();
  };

  Timelines.prototype.updateOrder = function() {
    var arr, i, num, tl, _i, _j, _len, _len1, _ref;
    arr = [];
    num = $("#timeline_holder").sortable("toArray");
    for (_i = 0, _len = num.length; _i < _len; _i++) {
      i = num[_i];
      _ref = this.tls;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        tl = _ref[_j];
        if (tl.getNumber() === i) {
          arr.push(tl);
        }
      }
    }
    return this.tls = arr;
  };

  Timelines.prototype.updateMakeButton = function() {
    var a, tl, _i, _len, _ref;
    a = true;
    _ref = this.tls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tl = _ref[_i];
      a = a && tl.isValidTime();
    }
    if (a && this.tls.length > 0) {
      return $("#make").removeClass("disabled");
    } else {
      return $("#make").addClass("disabled");
    }
  };

  return Timelines;

})();

Giraf.Tools = (function(_super) {
  __extends(Tools, _super);

  function Tools() {
    return Tools.__super__.constructor.apply(this, arguments);
  }

  Tools.uuid = function() {
    var s4;
    s4 = function() {
      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    };
    return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+ s4()+s4()+s4();
  };

  return Tools;

})(Giraf._base);

Giraf.View = (function(_super) {
  var _selector_expert, _selector_nav, _selector_quick;

  __extends(View, _super);

  _selector_nav = "nav";

  _selector_quick = "#quick";

  _selector_expert = "#expert";

  function View(app) {
    this.app = app;
    this.nav = new Giraf.View.Nav(app, $(_selector_nav));
    this.expert = new Giraf.View.Expert(app, $(_selector_expert));
    $(document).on("click", (function(_this) {
      return function(event) {
        var $t;
        $t = $(event.target);
        if ($t.attr("data-action") != null) {
          Giraf.Controller.Action(app, $t.attr("data-action"), {
            element: event.target
          });
        }
        if ($t.attr("data-action-weak") != null) {
          Giraf.Controller.Action(app, $t.attr("data-action-weak"), {
            element: event.target
          });
        }
        if ($t.attr("data-action-click") != null) {
          Giraf.Controller.Action(app, $t.attr("data-action-click"), {
            element: event.target
          });
        }
        if ($t.attr("data-action-click-weak") != null) {
          Giraf.Controller.Action(app, $t.attr("data-action-click-weak"), {
            element: event.target
          });
        }
        $t.parents("[data-action]").each(function() {
          return Giraf.Controller.Action(app, $(this).attr("data-action"), {
            element: this
          });
        });
        return $t.parents("[data-action-click]").each(function() {
          return Giraf.Controller.Action(app, $(this).attr("data-action-click"), {
            element: this
          });
        });
      };
    })(this)).on("dblclick", (function(_this) {
      return function(event) {
        var $t;
        $t = $(event.target);
        if ($t.attr("data-action-dblclick") != null) {
          Giraf.Controller.Action(app, $t.attr("data-action-dblclick"), {
            element: event.target
          });
        }
        if ($t.attr("data-action-dblclick-weak") != null) {
          Giraf.Controller.Action(app, $t.attr("data-action-dblclick-weak"), {
            element: event.target
          });
        }
        return $t.parents("[data-action-dblclick]").each(function() {
          return Giraf.Controller.Action(app, $(this).attr("data-action-dblclick"), {
            element: this
          });
        });
      };
    })(this));
  }

  return View;

})(Giraf._base);

Giraf.View._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf._base);

Giraf.View.Expert = (function(_super) {
  var _selector_composition, _selector_container, _selector_effect, _selector_node, _selector_project, _selector_tool;

  __extends(Expert, _super);

  _selector_container = "#expert_container";

  _selector_project = "#expert_project > .panel-container";

  _selector_composition = "#expert_composition > .panel-container";

  _selector_effect = "#expert_effect > .panel-container";

  _selector_tool = "#expert_tool > .panel-container";

  _selector_node = "#expert_node > .panel-container";

  function Expert(app, $expert) {
    this.app = app;
    this.$expert = $expert;
    this.project = new Giraf.View.Expert.Project(app, $expert.find(_selector_project));
    this.composition = new Giraf.View.Expert.Composition(app, $expert.find(_selector_composition));
    this.node = new Giraf.View.Expert.Node(app, $expert.find(_selector_node));
    this.droparea = new Giraf.View.Expert.Droparea(app, $expert);
  }

  return Expert;

})(Giraf.View._base);

Giraf.View.Expert._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf.View._base);

Giraf.View.Expert.Composition = (function(_super) {
  __extends(Composition, _super);

  function Composition(app, $composition) {
    var template;
    this.app = app;
    this.$composition = $composition;
    template = _.template("<div class=\"composition-window\">\n  <div class=\"composition-window-placeholder\">\n    <span>Composition</span>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Asperiores corporis delectus, doloremque eligendi explicabo fugit harum iusto magnam minus natus non odit officia perspiciatis possimus provident quo similique, suscipit tempora!</p><p>Aut ea eveniet facere officia placeat qui quod soluta! A autem commodi culpa cum, dignissimos dolorum eveniet, explicabo minima nesciunt nisi, officia omnis optio quae quas quia reiciendis rem unde?</p><p>Assumenda consectetur corporis et magnam voluptate. Ab aut beatae corporis cum dolorem dolores eius est expedita fuga hic, ipsum nobis quasi quibusdam quo recusandae soluta temporibus ut veniam vitae voluptatem?</p><p>Cupiditate dignissimos dolore dolorum ducimus enim, et explicabo fugit illo ipsa ipsam itaque laborum maiores nemo obcaecati quas quia quis similique! Autem consectetur dignissimos laudantium magni odit tenetur veniam vero.</p><p>Ab amet debitis dolorem est eveniet explicabo illum incidunt libero, magni minima, natus numquam omnis placeat porro quisquam saepe tempora voluptate! Aliquam eius error facere, maiores numquam vel veniam voluptatum.</p><p>Aliquid, assumenda consectetur cum cumque deserunt distinctio expedita fugit harum impedit magnam nemo nihil nobis perspiciatis ratione repellat sed, suscipit. At atque eos in molestias, nesciunt quas reiciendis. Consequuntur, ipsum.</p>\n  </div>\n  <img class=\"composition-img hidden\"/>\n  <video class=\"composition-video hidden\" controls></video>\n</div>\n<div class=\"composition-progress\"></div>");
    this.$composition.append(template({}));
  }

  Composition.prototype.refresh = function(type, content_url) {
    var $img, $video, d;
    d = $.Deferred();
    switch (type) {
      case "video":
        $video = $("video.composition-video");
        if ($video.get(0) == null) {
          d.reject();
        }
        $(".composition-window").children().each(function() {
          return $(this).addClass("hidden");
        });
        $video.removeClass("hidden").attr("src", content_url).one("canplay", function() {
          return d.resolve();
        });
        break;
      case "img":
        $img = $("img.composition-img");
        if ($img.get(0) == null) {
          d.reject();
        }
        $(".composition-window").children().each(function() {
          return $(this).addClass("hidden");
        });
        $img.removeClass("hidden").attr("src", content_url);
        d.resolve();
        break;
      default:
        console.log("Type '" + type + "' is not defined.");
        d.resolve();
    }
    return d.promise();
  };

  return Composition;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Droparea = (function(_super) {
  var innerAcitve, isActive;

  __extends(Droparea, _super);

  isActive = false;

  innerAcitve = 0;

  function Droparea(app, $droparea) {
    this.app = app;
    this.$droparea = $droparea;
    $droparea.on("dragstart", (function(_this) {
      return function() {
        return true;
      };
    })(this)).on("dragover", (function(_this) {
      return function() {
        return false;
      };
    })(this)).on("dragenter", (function(_this) {
      return function(event) {
        var item, _i, _len, _ref, _ref1;
        if (isActive) {
          innerAcitve++;
        } else {
          _ref = event.originalEvent.dataTransfer.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if ((_ref1 = item.type) === "video/mp4" || _ref1 === "image/gif" || _ref1 === "image/png" || _ref1 === "image/jpeg") {
              _this.show();
              break;
            }
          }
        }
        return false;
      };
    })(this)).on("dragleave", (function(_this) {
      return function() {
        if (innerAcitve > 0) {
          return innerAcitve--;
        } else {
          return _this.hide();
        }
      };
    })(this)).on("drop", (function(_this) {
      return function(event) {
        var files;
        innerAcitve = false;
        _this.hide();
        files = event.originalEvent.dataTransfer.files;
        if (files.length > 0) {
          Giraf.Controller.Action(app, "drop__import_file", {
            fileList: files
          });
        }
        return false;
      };
    })(this));
  }

  Droparea.prototype.show = function() {
    var template;
    isActive = true;
    template = _.template("<div class=\"droparea\">\n  <div class=\"droparea-label\">\n    <h3>ドロップでファイル読み込み</h3>\n  </div>\n</div>");
    return this.$droparea.append(template());
  };

  Droparea.prototype.hide = function() {
    isActive = false;
    return $(".droparea").remove();
  };

  return Droparea;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node = (function(_super) {
  __extends(Node, _super);

  function Node(app, $node) {
    var template;
    this.app = app;
    this.$node = $node;
    this.pieces = {};
    this.corkboardWidth = 3000;
    this.corkboardHeight = 3000;
    this.svg = new Giraf.View.Expert.Node.SVG(app, this.corkboardWidth, this.corkboardHeight);
    template = _.template("<div class=\"node-corkboard-container\">\n  <div class=\"node-corkboard\">\n    <div id=\"node_corkboard_svg\"></div>\n  </div>\n</div>");
    $node.append(template());
    $node.find(".node-corkboard").css("width", "" + this.corkboardWidth + "px").css("height", "" + this.corkboardHeight + "px");
    $node.on("drop", (function(_this) {
      return function(event) {
        var oe, referer_uuid;
        oe = event.originalEvent;
        referer_uuid = oe.dataTransfer.getData("referer_uuid");
        if (referer_uuid) {
          return _this.appendComposition(app.model.get(referer_uuid), oe.offsetX, oe.offsetY);
        }
      };
    })(this));
  }

  Node.prototype.appendPoint = function(x, y) {
    var d;
    d = $.Deferred();
    if (x == null) {
      x = this.$node.scrollLeft() + this.$node.width() / 2;
    }
    if (y == null) {
      y = this.$node.scrollTop() + this.$node.height() / 2;
    }
    this.svg.addPoint(x, y);
    d.resolve();
    return d.promise();
  };

  Node.prototype.appendComposition = function(referer, x, y) {
    var d;
    d = $.Deferred();
    if (x == null) {
      x = this.$node.scrollLeft() + this.$node.width() / 2;
    }
    if (y == null) {
      y = this.$node.scrollTop() + this.$node.height() / 2;
    }
    this.svg.addComposition(referer, x, y);
    d.resolve();
    return d.promise();
  };

  return Node;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node.SVG = (function(_super) {
  __extends(SVG, _super);

  SVG.D3 = {};

  SVG.pieces = {};

  SVG.hoveredContent = null;

  function SVG(app, width, height) {
    this.app = app;
    this.width = width;
    this.height = height;
    this.D3 = {};
    this.pieces = {};
    $((function(_this) {
      return function() {
        _this.D3.svg = d3.select("#node_corkboard_svg").append("svg").attr("width", width).attr("height", height);
        _this.D3.svg.defs = _this.D3.svg.append("defs");
        _this.D3.svg.nodeLayer = _this.D3.svg.append("g");
        _this.D3.svg.contentLayer = _this.D3.svg.append("g").on("mousemove", function() {
          var $node, uuid, _ref;
          $node = $(d3.event.target);
          uuid = (_ref = $node.parents("[data-uuid]")) != null ? _ref.attr("data-uuid") : void 0;
          return _this.hoveredContent = uuid != null ? uuid : null;
        });
        _this.D3.svg.contentLayer.append("rect").attr({
          x: 0,
          y: 0,
          width: width,
          height: height,
          fill: "transparent"
        });
        return _this.D3.svg.overLayer = _this.D3.svg.append("g");
      };
    })(this));
  }

  SVG.prototype.addComposition = function(referer, x, y) {
    var piece, uuid;
    x = Math.min(Math.max(x, 0), this.width);
    y = Math.min(Math.max(y, 0), this.height);
    piece = null;
    uuid = Giraf.Tools.uuid();
    if (referer instanceof Giraf.Model.Composition) {
      piece = new Giraf.View.Expert.Node.Piece.Composition(this, uuid, referer);
    }
    if (piece != null) {
      this.pieces[uuid] = piece;
      return piece.draw().move(x, y);
    }
  };

  SVG.prototype.addPoint = function(x, y) {
    var piece, uuid;
    x = Math.min(Math.max(x, 0), this.width);
    y = Math.min(Math.max(y, 0), this.height);
    uuid = Giraf.Tools.uuid();
    piece = new Giraf.View.Expert.Node.Piece.Point(this, uuid);
    this.pieces[uuid] = piece;
    return piece.draw().move(x, y);
  };

  SVG.prototype.addArrow = function(from, to) {
    var arrow, cdn;
    if ((from == null) && (to == null)) {
      return;
    }
    arrow = {};
    if (from != null) {
      arrow.from = from;
    }
    if (to != null) {
      arrow.to = to;
    }
    cdn = this.getLineCoordinate(from, to);
    arrow.line = this.svg.line(cdn.x1, cdn.y1, cdn.x2, cdn.y2).stroke({
      width: 2
    });
    return this.arrows.push(arrow);
  };

  SVG.prototype.updateArrow = function(moveObject) {
    return this.arrows.forEach((function(_this) {
      return function(arrow) {
        var cdn, _ref, _ref1;
        if ((moveObject == null) || (((_ref = arrow.from) != null ? _ref.uuid : void 0) === moveObject.uuid || ((_ref1 = arrow.to) != null ? _ref1.uuid : void 0) === moveObject.uuid)) {
          cdn = _this.getLineCoordinate(arrow.from, arrow.to);
          return arrow.line.plot(cdn.x1, cdn.y1, cdn.x2, cdn.y2);
        }
      };
    })(this));
  };

  SVG.prototype.getLineCoordinate = function(from, to) {
    var cdn;
    if ((from == null) && (to == null)) {
      return;
    }
    cdn = {};
    if (from != null) {
      cdn.x1 = from.x;
      cdn.y1 = from.y;
      if (to != null) {
        cdn.x2 = to.x;
        cdn.y2 = to.y;
      } else {
        cdn.x2 = from.x + 100;
        cdn.y2 = from.y;
      }
    } else {
      cdn.x1 = to.x - 100;
      cdn.y1 = to.y;
      cdn.x2 = to.x;
      cdn.y2 = to.y;
    }
    return cdn;
  };

  return SVG;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node.Piece = (function(_super) {
  __extends(Piece, _super);

  function Piece() {
    return Piece.__super__.constructor.apply(this, arguments);
  }

  Piece.x = 0;

  Piece.y = 0;

  return Piece;

})(Giraf.View.Expert._base);

Giraf.View.Expert.Node.Piece.Content = (function(_super) {
  __extends(Content, _super);

  function Content(svg) {
    this.svg = svg;
    this.controllable = true;
  }

  Content.prototype.controll = function(bool) {
    this.controllable = bool;
    return this;
  };

  Content.prototype.select = function(bool) {};

  return Content;

})(Giraf.View.Expert.Node.Piece);

Giraf.View.Expert.Node.Piece.Over = (function(_super) {
  __extends(Over, _super);

  function Over(svg) {
    this.svg = svg;
  }

  return Over;

})(Giraf.View.Expert.Node.Piece);

Giraf.View.Expert.Node.Piece.Composition = (function(_super) {
  var data;

  __extends(Composition, _super);

  Composition.destination = null;

  data = {
    width: 120,
    height: 80,
    rect: {
      radius: 6,
      color: "#3E90BA"
    },
    text: {
      x: 0,
      y: -25,
      fontSize: 11,
      fontWeight: 20,
      color: "white"
    },
    hook: {
      x: 45,
      y: 0
    }
  };

  function Composition(svg, uuid, referer) {
    this.svg = svg;
    this.uuid = uuid;
    Composition.__super__.constructor.call(this, svg);
    this.app = svg.app;
    this.referer_uuid = referer.uuid;
    this.d3svg = svg.D3.svg;
  }

  Composition.prototype.move = function(x, y) {
    var _ref;
    this.x = Math.min(Math.max(x, 0), this.svg.width);
    this.y = Math.min(Math.max(y, 0), this.svg.height);
    if ((_ref = this.d3composition) != null) {
      _ref.attr("transform", "translate(" + this.x + ", " + this.y + ")");
    }
    return this;
  };

  Composition.prototype.draw = function() {
    $((function(_this) {
      return function() {
        var d3compositionEventHandler, d3hookEventHandler, _ref;
        d3compositionEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _this.controll(false);
          return _this.d3svg.attr("cursor", "move");
        }).on("drag", function() {
          return _this.move(d3.event.x, d3.event.y);
        }).on("dragend", function() {
          _this.controll(true);
          return _this.d3svg.attr("cursor", null);
        });
        d3hookEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _.each(_this.svg.pieces, function(v) {
            return v.controll(false);
          });
          _this.d3svg.attr("cursor", "none");
          _this.arrow = new Giraf.View.Expert.Node.Piece.Arrow(_this.svg);
          return _this.arrow.draw().move(_this.x + data.hook.x, _this.y + data.hook.y, _this.x + data.hook.x, _this.y + data.hook.y);
        }).on("drag", function() {
          _.each(_this.svg.pieces, function(v, k) {
            if (_this.svg.hoveredContent === k && k !== _this.uuid) {
              return v.select(true);
            } else {
              return v.select(false);
            }
          });
          return _this.arrow.move(_this.x + data.hook.x, _this.y + data.hook.y, _this.x + d3.event.x, _this.y + d3.event.y);
        }).on("dragend", function() {
          _this.d3svg.attr("cursor", null);
          _.each(_this.svg.pieces, function(v) {
            return v.select(false).controll(true);
          });
          _this.arrow.remove();
          return _this.arrow = null;
        });
        _this.d3composition = _this.d3svg.contentLayer.append("g").attr("data-uuid", _this.uuid).call(d3compositionEventHandler);
        _this.d3rect = _this.d3composition.append("rect").attr({
          x: -data.width / 2,
          y: -data.height / 2,
          width: data.width,
          height: data.height,
          rx: data.rect.radius,
          ry: data.rect.radius,
          fill: data.rect.color
        });
        _this.d3text = _this.d3composition.append("text").text((_ref = _this.app.model.get(_this.referer_uuid)) != null ? _ref.name : void 0).attr({
          x: data.text.x,
          y: data.text.y,
          "font-size": data.text.fontSize,
          "font-weight": data.text.fontWeight,
          "text-anchor": "middle",
          "fill": data.text.color
        });
        _this.d3circleDot = _this.d3composition.append("circle").attr({
          cx: data.hook.x,
          cy: data.hook.y,
          r: 3.5,
          fill: "white",
          opacity: 0
        });
        return _this.d3circleHook = _this.d3composition.append("circle").attr({
          cx: data.hook.x,
          cy: data.hook.y,
          r: 6,
          stroke: "white",
          "stroke-width": 1.5,
          fill: "transparent"
        }).on("mouseover", function() {
          if (_this.controllable) {
            return _this.d3circleDot.attr("opacity", 1);
          }
        }).on("mouseout", function() {
          return _this.d3circleDot.attr("opacity", 0);
        }).call(d3hookEventHandler);
      };
    })(this));
    return this;
  };

  Composition.prototype.select = function(bool) {
    var _ref, _ref1;
    Composition.__super__.select.call(this, bool);
    if (bool) {
      if ((_ref = this.d3rect) != null) {
        _ref.attr({
          stroke: "white",
          "stroke-width": 2
        });
      }
    } else {
      if ((_ref1 = this.d3rect) != null) {
        _ref1.attr({
          "stroke-width": 0
        });
      }
    }
    return this;
  };

  return Composition;

})(Giraf.View.Expert.Node.Piece.Content);

Giraf.View.Expert.Node.Piece.Point = (function(_super) {
  var data;

  __extends(Point, _super);

  Point.source = null;

  data = {
    width: 40,
    height: 40,
    rect: {
      radius: 6,
      color: "#D59B0A"
    },
    hook: {
      x: 0,
      y: 0
    }
  };

  function Point(svg, uuid) {
    this.svg = svg;
    this.uuid = uuid;
    Point.__super__.constructor.call(this, svg);
    this.d3svg = svg.D3.svg;
  }

  Point.prototype.move = function(x, y) {
    var _ref;
    this.x = Math.min(Math.max(x, 0), this.svg.width);
    this.y = Math.min(Math.max(y, 0), this.svg.height);
    if ((_ref = this.d3point) != null) {
      _ref.attr("transform", "translate(" + this.x + ", " + this.y + ")");
    }
    return this;
  };

  Point.prototype.draw = function() {
    $((function(_this) {
      return function() {
        var d3hookEventHandler, d3pointEventHandler;
        d3pointEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _this.controll(false);
          return _this.d3svg.attr("cursor", "move");
        }).on("drag", function() {
          return _this.move(d3.event.x, d3.event.y);
        }).on("dragend", function() {
          _this.controll(true);
          return _this.d3svg.attr("cursor", null);
        });
        d3hookEventHandler = d3.behavior.drag().on("dragstart", function() {
          d3.event.sourceEvent.stopPropagation();
          _.each(_this.svg.pieces, function(v) {
            return v.controll(false);
          });
          _this.d3svg.attr("cursor", "none");
          _this.arrow = new Giraf.View.Expert.Node.Piece.Arrow(_this.svg);
          return _this.arrow.draw().move(_this.x + data.hook.x, _this.y + data.hook.y, _this.x + data.hook.y, _this.y + data.hook.y);
        }).on("drag", function() {
          _.each(_this.svg.pieces, function(v, k) {
            if (_this.svg.hoveredContent === k && k !== _this.uuid) {
              return v.select(true);
            } else {
              return v.select(false);
            }
          });
          return _this.arrow.move(_this.x + data.hook.x, _this.y + data.hook.y, _this.x + d3.event.x, _this.y + d3.event.y);
        }).on("dragend", function() {
          _this.d3svg.attr("cursor", null);
          _.each(_this.svg.pieces, function(v) {
            return v.select(false).controll(true);
          });
          _this.arrow.remove();
          return _this.arrow = null;
        });
        _this.d3point = _this.d3svg.contentLayer.append("g").attr("data-uuid", _this.uuid).call(d3pointEventHandler).on("tick", function() {
          var _ref;
          return (_ref = _this.link) != null ? _ref.move() : void 0;
        });
        _this.d3rect = _this.d3point.append("rect").attr({
          x: -data.width / 2,
          y: -data.height / 2,
          width: data.width,
          height: data.height,
          rx: data.rect.radius,
          ry: data.rect.radius,
          fill: data.rect.color
        });
        _this.d3circleDot = _this.d3point.append("circle").attr({
          cx: data.hook.x,
          cy: data.hook.y,
          r: 3.5,
          fill: "white",
          opacity: 0
        });
        return _this.d3circleHook = _this.d3point.append("circle").attr({
          cx: data.hook.x,
          cy: data.hook.y,
          r: 6,
          stroke: "white",
          "stroke-width": 1.5,
          fill: "transparent"
        }).on("mouseover", function() {
          if (_this.controllable) {
            return _this.d3circleDot.attr("opacity", 1);
          }
        }).on("mouseout", function() {
          return _this.d3circleDot.attr("opacity", 0);
        }).call(d3hookEventHandler);
      };
    })(this));
    return this;
  };

  Point.prototype.select = function(bool) {
    var _ref, _ref1;
    Point.__super__.select.call(this, bool);
    if (bool) {
      if ((_ref = this.d3rect) != null) {
        _ref.attr({
          stroke: "white",
          "stroke-width": 2
        });
      }
    } else {
      if ((_ref1 = this.d3rect) != null) {
        _ref1.attr({
          "stroke-width": 0
        });
      }
    }
    return this;
  };

  return Point;

})(Giraf.View.Expert.Node.Piece.Content);

Giraf.View.Expert.Node.Piece.Arrow = (function(_super) {
  __extends(Arrow, _super);

  Arrow.x1 = 0;

  Arrow.y1 = 0;

  Arrow.x2 = 0;

  Arrow.y2 = 0;

  function Arrow(svg) {
    this.svg = svg;
    Arrow.__super__.constructor.call(this, svg);
    this.uuid = Giraf.Tools.uuid();
    this.d3svg = svg.D3.svg;
  }

  Arrow.prototype.move = function(x1, y1, x2, y2) {
    var _ref;
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    if ((_ref = this.d3arrow) != null) {
      _ref.attr({
        x1: this.x1,
        y1: this.y1,
        x2: this.x2,
        y2: this.y2
      });
    }
    return this;
  };

  Arrow.prototype.draw = function() {
    $((function(_this) {
      return function() {
        _this.d3arrowTail = _this.d3svg.defs.append("marker").attr({
          id: "" + _this.uuid + "_arrow_tail",
          refX: 2,
          refY: 2,
          markerWidth: 4,
          markerHeight: 4,
          orient: "auto"
        });
        _this.d3arrowTail.append("circle").attr({
          cx: 2,
          cy: 2,
          r: 1.75,
          fill: "white"
        });
        _this.d3arrowHead = _this.d3svg.defs.append("marker").attr({
          id: "" + _this.uuid + "_arrow_head",
          refX: 0,
          refY: 3,
          markerWidth: 6,
          markerHeight: 6,
          orient: "auto"
        });
        _this.d3arrowHead.append("path").attr({
          d: "M0,0 V6 L6,3 Z",
          fill: "white"
        });
        return _this.d3arrow = _this.d3svg.overLayer.append("line").attr({
          x1: _this.x1,
          y1: _this.y1,
          x2: _this.x2,
          y2: _this.y2,
          stroke: "white",
          "stroke-width": 2,
          "stroke-dasharray": "7,5",
          "marker-start": "url(#" + _this.uuid + "_arrow_tail)",
          "marker-end": "url(#" + _this.uuid + "_arrow_head)"
        });
      };
    })(this));
    return this;
  };

  Arrow.prototype.remove = function() {
    var _ref, _ref1, _ref2;
    if ((_ref = this.d3arrowTail) != null) {
      _ref.remove();
    }
    if ((_ref1 = this.d3arrowHead) != null) {
      _ref1.remove();
    }
    if ((_ref2 = this.d3arrow) != null) {
      _ref2.remove();
    }
    return this;
  };

  return Arrow;

})(Giraf.View.Expert.Node.Piece.Over);

Giraf.View.Expert.Project = (function(_super) {
  __extends(Project, _super);

  function Project(app, $project) {
    this.app = app;
    this.$project = $project;
    this.pieces = {};
  }

  Project.prototype.append = function(referer) {
    var piece, uuid;
    piece = null;
    uuid = Giraf.Tools.uuid();
    if (referer instanceof Giraf.Model.File) {
      piece = new Giraf.View.Expert.Project.Piece.File(this.app, uuid, referer);
    }
    if (referer instanceof Giraf.Model.Composition) {
      piece = new Giraf.View.Expert.Project.Piece.Composition(this.app, uuid, referer);
    }
    if (piece != null) {
      this.pieces[uuid] = piece;
      this.$project.append(piece.html());
      return uuid;
    }
  };

  return Project;

})(Giraf.View.Expert._base);


/*
            File                  Composition
  referer   Model.File            Model.Composition
  type      "file"                "composition"
  title     referer.file.name     referer.name
 */

Giraf.View.Expert.Project.Piece = (function() {
  function Piece(app, uuid, referer, type, title) {
    this.app = app;
    this.uuid = uuid;
    this.type = type;
    this.title = title;
    this.referer_uuid = referer.uuid;
    $(referer).on("statusChanged", function(event, status) {
      var $target;
      $target = $(".project-piece[data-uuid=" + uuid + "]");
      switch (status) {
        case "loading":
          return $target.addClass("loading");
        case "normal":
          return $target.removeClass("loading");
        case "dying":
          return $target.remove();
      }
    });
  }

  Piece.prototype.html = function() {
    var $rtn, template, _ref, _ref1, _ref2;
    template = _.template("<div class=\"project-piece\" draggable=\"true\" data-referer-type=\"<%- type %>\" data-uuid=\"<%- uuid %>\"\n data-action-click=\"expert__project__change_target\" data-action-dblclick=\"expert__project__refresh_composition\">\n  <div class=\"project-piece-tag\"></div>\n  <div class=\"project-piece-content\">\n    <img class=\"project-piece-thumbnail\"/>\n    <div class=\"project-piece-title\"><%- title %></div>\n  </div>\n</div>");
    $rtn = $(template({
      type: (_ref = this.type) != null ? _ref : "",
      uuid: (_ref1 = this.uuid) != null ? _ref1 : "",
      title: (_ref2 = this.title) != null ? _ref2 : ""
    }));
    $rtn.on("dragstart", (function(_this) {
      return function(event) {
        return event.originalEvent.dataTransfer.setData("referer_uuid", _this.referer_uuid);
      };
    })(this));
    return $rtn.get(0);
  };

  return Piece;

})();

Giraf.View.Expert.Project.Piece.File = (function(_super) {
  __extends(File, _super);

  function File(app, uuid, referer) {
    this.app = app;
    this.uuid = uuid;
    File.__super__.constructor.call(this, app, uuid, referer, "file", referer.file.name);
  }

  File.prototype.html = function() {
    var $rtn;
    $rtn = $(File.__super__.html.call(this));
    if (this.app.model.get(this.referer_uuid).status === "loading") {
      $rtn.addClass("loading");
    }
    return $rtn.get(0);
  };

  return File;

})(Giraf.View.Expert.Project.Piece);

Giraf.View.Expert.Project.Piece.Composition = (function(_super) {
  __extends(Composition, _super);

  function Composition(app, uuid, referer) {
    this.app = app;
    this.uuid = uuid;
    Composition.__super__.constructor.call(this, app, uuid, referer, "composition", referer.name);
  }

  return Composition;

})(Giraf.View.Expert.Project.Piece);

Giraf.View.Modal = (function(_super) {
  var createButtonDOM;

  __extends(Modal, _super);

  function Modal() {}

  Modal.prototype.show = function(args) {
    var action, template;
    template = _.template("<div class=\"modal\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-title\"><h3><%- title %></h3></div>\n    <div class=\"modal-content\"><%= content %></div>\n    <div class=\"modal-action\"><%= action %></div>\n  </div>\n</div>");
    if (args.title == null) {
      args.title = "";
    }
    if (args.content == null) {
      args.content = "";
    }
    action = createButtonDOM.call(this, args.action);
    $("body").append(template({
      title: args.title,
      content: args.content,
      action: action
    }));
    $(".modal").on({
      click: function(event) {
        var onEnd;
        if ($(event.target).hasClass("modal")) {
          onEnd = function() {
            return $(".modal").remove();
          };
          $(".modal-dialog").bind("transitionend", onEnd);
          return $(".modal").removeClass("show");
        }
      }
    });
    return setTimeout(function() {
      return $(".modal").addClass("show");
    }, 0);
  };

  createButtonDOM = function(data) {
    var arr, button, key, value;
    arr = [];
    for (key in data) {
      value = data[key];
      button = _.template("<button\n  <% if (primary === true) { print('class=\"button-primary\"'); } %>\n>\n  <%- text %>\n</button>");
      arr.push(button({
        primary: value.primary === true,
        text: value.text
      }));
    }
    return arr.join("");
  };

  return Modal;

})(Giraf.View._base);

Giraf.View.Nav = (function(_super) {
  var $dropdowns, isActive, _selector_dropdown;

  __extends(Nav, _super);

  _selector_dropdown = "li.dropdown";

  $dropdowns = null;

  isActive = false;

  function Nav(app, $nav) {
    var self;
    this.app = app;
    this.$nav = $nav;
    $dropdowns = this.$nav.find(_selector_dropdown);
    self = this;
    $dropdowns.on("mouseenter", function() {
      if (isActive) {
        return self.active(this);
      }
    });
    $(document).on("click", function(event) {
      if (!$.contains($nav.get(0), event.target)) {
        return self.inactive();
      } else if ($(event.target).hasClass("dropdown-toggle")) {
        if (!isActive) {
          return self.active($(event.target).parent(".dropdown"));
        } else {
          return self.inactive();
        }
      }
    });
  }

  Nav.prototype.active = function(target) {
    var d;
    d = new $.Deferred;
    isActive = true;
    $dropdowns.each(function(index, element) {
      return $(element).removeClass("open");
    });
    $(target).addClass("open");
    setTimeout(function() {
      return d.resolve();
    }, 30);
    return d.promise();
  };

  Nav.prototype.inactive = function() {
    var d;
    d = new $.Deferred;
    isActive = false;
    $dropdowns.each(function(index, element) {
      return $(element).removeClass("open");
    });
    setTimeout(function() {
      return d.resolve();
    }, 30);
    return d.promise();
  };

  Nav.prototype.isActive = function() {
    return isActive;
  };

  return Nav;

})(Giraf.View._base);

Giraf.View.Quick = (function(_super) {
  var selector_preview, selector_result, selector_thumbnail, selector_timeline;

  __extends(Quick, _super);

  selector_preview = "#quick_preview";

  selector_thumbnail = "#quick_thumbnail";

  selector_timeline = "#quick_timeline";

  selector_result = "#quick_result";

  function Quick($quick) {
    this.$quick = $quick;
  }

  return Quick;

})(Giraf.View._base);

Giraf.View.Quick._base = (function(_super) {
  __extends(_base, _super);

  function _base() {
    return _base.__super__.constructor.apply(this, arguments);
  }

  return _base;

})(Giraf.View._base);

app = new Giraf.App;

app.run();
